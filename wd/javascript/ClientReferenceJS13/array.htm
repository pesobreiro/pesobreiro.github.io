<HTML>
<HEAD>
<TITLE>
</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<FONT SIZE=-1><A HREF="contents.htm">Table of Contents</A> | <A HREF="area.htm">Previous</A>
 | <A HREF="boolean.htm">Next</A>
 | <A HREF="bklast.htm">Index</A>
</FONT><BR><BR>
<HR>

<H1><A NAME="Array"></A>
<A NAME="1193137">
 Array
</A></H1>
<A NAME="1193151">
Lets you work with arrays.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left COLSPAN=2 ROWSPAN=1><P><A NAME="1193140">
<I>Core object</I></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193144">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193146">
JavaScript 1.1, NES 2.0</A></P><P><A NAME="1198127">
</A></P><P><A NAME="1193150">
JavaScript 1.3: added <A HREF="array.htm#1193889"><CODE>toSource</CODE></A> method; changed <A HREF="array.htm#1193439"><CODE>length</CODE></A> property; changed <A HREF="array.htm#1196550"><CODE>push</CODE></A> and <A HREF="array.htm#1193766"><CODE>splice</CODE></A> methods.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1198268">
<I>ECMA version</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1198270">
ECMA-262</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193152">
 Created by
</A></H4>

<A NAME="1193153">
The <CODE>Array</CODE> object constructor:</A></P>
<PRE><A NAME="1193154">new Array(<I>arrayLength</I>)<br>new Array(<I>element0</I>, <I>element1</I>, ..., <I>elementN</I>)</A></PRE><A NAME="1213845">
An array literal:</A></P>
<PRE><A NAME="1213846">[<I>element0</I>, <I>element1</I>, ..., <I>elementN</I>]</A></PRE><A NAME="1213847">
<I>JavaScript 1.2 when you specify </I><I><CODE>LANGUAGE="JavaScript1.2"</CODE></I><I> in the </I><I><CODE>&lt;SCRIPT&gt;</CODE></I><I> tag:</I></A></P>
<PRE><A NAME="1193156">new Array(<I>element0</I>, <I>element1</I>, ..., <I>elementN</I>)</A></PRE><A NAME="1193157">
<I>JavaScript 1.2 when you do not specify </I><I><CODE>LANGUAGE="JavaScript1.2"</CODE></I><I> in the </I><I><CODE>&lt;SCRIPT&gt;</CODE></I><I> tag:</I></A></P>
<PRE><A NAME="1193158">new Array([<I>arrayLength</I>])<br>new Array([<I>element0</I>[, <I>element1</I>[, ..., <I>elementN</I>]]])</A></PRE><A NAME="1193159">
<I>JavaScript 1.1:</I></A></P>
<PRE><A NAME="1193160">new Array([<I>arrayLength</I>])<br>new Array([<I>element0</I>[, <I>element1</I>[, ..., <I>elementN</I>]]])</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193162">
 Parameters
</A></H4>

<A NAME="1211883">
<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1211876">arrayLength</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1211878">
The initial length of the array. You can access this value using the <CODE>length</CODE> property. If the value specified is not a number, an array of length 1 is created, with the first element having the specified value. The maximum length allowed for an array is 4,294,967,295.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1211880">element<I>N</I></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1211882">
A list of values for the array's elements. When this form is specified, the array is initialized with the specified values as its elements, and the array's <CODE>length</CODE> property is set to the number of arguments.</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1211884">
 Description
</A></H4>

<A NAME="1211904">
An array is an ordered set of values associated with a single variable name.</A></P>
<A NAME="1212668">
The following example creates an <CODE>Array</CODE> object with an array literal; the <CODE>coffees</CODE> array contains three elements and a length of three:</A></P>
<PRE><A NAME="1212669">coffees = ["French Roast", "Columbian", "Kona"]</A></PRE><B><A NAME="HeadRunIn;"></A>
<A NAME="1211905">
Indexing an array. </A></B><A NAME="1211907">
You index an array by its ordinal number. For example, assume you define the following array:</A></P>
<PRE><A NAME="1193177">myArray = new Array("Wind","Rain","Fire")</A></PRE><A NAME="1204385">
You then refer to the first element of the array as <CODE>myArray[0]</CODE> and the second element of the array as <CODE>myArray[1]</CODE>.</A></P>
<B><A NAME="HeadRunIn;"></A>
<A NAME="1204386">
Specifying a single parameter. </A></B><A NAME="1204388">
When you specify a single numeric parameter with the <CODE>Array</CODE> constructor, you specify the initial length of the array. The following code creates an array of five elements:</A></P>
<PRE><A NAME="1193182">billingMethod = new Array(5)</A></PRE><A NAME="1193183">
The behavior of the <CODE>Array</CODE> constructor depends on whether the single parameter is a number.</A></P>
<ul><P><LI><A NAME="1193185">
If the value specified is a number, the constructor converts the number to an unsigned, 32-bit integer and generates an array with the <CODE>length</CODE> property (size of the array) set to the integer. The array initially contains no elements, even though it might have a non-zero length.</A></LI>
<P><LI><A NAME="1193186">
If the value specified is not a number, an array of length 1 is created, with the first element having the specified value.</A></LI>
</ul><A NAME="1193188">
The following code creates an array of length 25, then assigns values to the first three elements:</A></P>
<PRE><A NAME="1193189">musicTypes = new Array(25)<br>musicTypes[0] = "R&amp;B"<br>musicTypes[1] = "Blues"<br>musicTypes[2] = "Jazz"</A></PRE><A NAME="1193191">
You can construct a <I>dense</I> array of two or more elements starting with index 0 if you define initial values for all elements. A dense array is one in which each element has a value. The following code creates a dense array with three elements:</A></P>
<PRE><A NAME="1193192">myArray = new Array("Hello", myVar, 3.14159)</A></PRE><B><A NAME="HeadRunIn;"></A>
<A NAME="1193193">
Increasing the array length indirectly. </A></B><A NAME="1193195">
An array's length increases if you assign a value to an element higher than the current length of the array. The following code creates an array of length 0, then assigns a value to element 99. This changes the length of the array to 100.</A></P>
<PRE><A NAME="1204395">colors = new Array()<br>colors[99] = "midnightblue"</A></PRE><B><A NAME="HeadRunIn;"></A>
<A NAME="1204396">
Creating an array using the result of a match. </A></B><A NAME="1204397">
The result of a match between a regular expression and a string can create an array. This array has properties and elements that provide information about the match. An array is the return value of <A HREF="regexp.htm#1194735"><CODE>RegExp.exec</CODE></A>, <A HREF="string.htm#1205239"><CODE>String.match</CODE></A>, and <A HREF="string.htm#1194258"><CODE>String.replace</CODE></A>. To help explain these properties and elements, look at the following example and then refer to the table below: </A></P>
<PRE><A NAME="1193208">&lt;SCRIPT LANGUAGE="JavaScript1.2"&gt;<br>//Match one d followed by one or more b's followed by one d<br>//Remember matched b's and the following d<br>//Ignore case</A></PRE><PRE><A NAME="1193209">myRe=/d(b+)(d)/i;<br>myArray = myRe.exec("cdbBdbsbz");</A></PRE><PRE><A NAME="1193210">&lt;/SCRIPT&gt;</A></PRE><A NAME="1193211">
The properties and elements returned from this match are as follows:</A></P>
<A NAME="1193243">
<P><B></B>
<TABLE BORDER="2" CELLPADDING=5>
<TR><TH VALIGN=baseline ALIGN=left><B><A NAME="1193214">
<B>Property/Element
</B></A><B><TH VALIGN=baseline ALIGN=left><B><A NAME="1193216">
<B>Description
</B></A><B><TH VALIGN=baseline ALIGN=left><B><A NAME="1193218">
<B>Example
</B></A><B>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193220">input</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193222">
A read-only property that reflects the original string against which the regular expression was matched.</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193224">
cdbBdbsbz</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193226">index</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193228">
A read-only property that is the zero-based index of the match in the string.</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193230">
1</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193232">[0]</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193234">
A read-only element that specifies the last matched characters.</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193236">
dbBd</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193238">[1], ...[n]</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193240">
Read-only elements that specify the parenthesized substring matches, if included in the regular expression. The number of possible parenthesized substrings is unlimited.</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193242">
[1]=bB&nbsp; <br>[2]=d</A></P>

</TABLE>
<TABLE>
<TR><TD>
</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193244">
 Backward Compatibility
</A></H4>

<B><A NAME="HeadRunIn;"></A>
<A NAME="1193245">
JavaScript 1.2. </A></B><A NAME="1193246">
When you specify a single parameter with the <CODE>Array</CODE> constructor, the behavior depends on whether you specify <CODE>LANGUAGE="JavaScript1.2"</CODE> in the <CODE>&lt;SCRIPT&gt;</CODE> tag:</A></P>
<ul><P><LI><A NAME="1193247">
If you specify <CODE>LANGUAGE="JavaScript1.2"</CODE> in the <CODE>&lt;SCRIPT&gt;</CODE> tag, a single-element array is returned. For example, <CODE>new Array(5)</CODE> creates a one-element array with the first element being 5. A constructor with a single parameter acts in the same way as a multiple parameter constructor. You cannot specify the <CODE>length</CODE> property of an <CODE>Array</CODE> using a constructor with one parameter.</A></LI>
<P><LI><A NAME="1193248">
If you do not specify <CODE>LANGUAGE="JavaScript1.2"</CODE> in the <CODE>&lt;SCRIPT&gt;</CODE> tag, you specify the initial length of the array as with other JavaScript versions.</A></LI>
</ul><B><A NAME="HeadRunIn;"></A>
<A NAME="1193249">
JavaScript 1.1 and earlier. </A></B><A NAME="1193251">
When you specify a single parameter with the <CODE>Array</CODE> constructor, you specify the initial length of the array. The following code creates an array of five elements:</A></P>
<PRE><A NAME="1193252">billingMethod = new Array(5)</A></PRE><B><A NAME="HeadRunIn;"></A>
<A NAME="1193253">
JavaScript 1.0. </A></B><A NAME="1193254">
You must index an array by its ordinal number; for example <CODE>myArray[0]</CODE>.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193255">
 Property Summary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</A></H4>

<A NAME="1193289">
<P><B></B>
<TABLE BORDER="2" CELLPADDING=5>
<TR><TH VALIGN=baseline ALIGN=left><B><A NAME="1193258">
<B>Property
</B></A><B><TH VALIGN=baseline ALIGN=left><B><A NAME="1193260">
<B>Description
</B></A><B>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1206419"><A HREF="array.htm#1206131"><CODE>constructor</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1206421">
Specifies the function that creates an object's prototype.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193265"><A HREF="array.htm#1217239"><CODE>index</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193267">
For an array created by a regular expression match, the zero-based index of the match in the string.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193272"><A HREF="array.htm#1193419"><CODE>input</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193274">
For an array created by a regular expression match, reflects the original string against which the regular expression was matched.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193279"><A HREF="array.htm#1193439"><CODE>length</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193281">
Reflects the number of elements in an array</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1206003"><A HREF="array.htm#1205871"><CODE>prototype</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1206005">
Allows the addition of properties to all objects.</A></P>

</TABLE>
<TABLE>
<TR><TD>
</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193290">
 Method Summary
</A></H4>

<A NAME="1193380">
<P><B></B>
<TABLE BORDER="2" CELLPADDING=5>
<TR><TH VALIGN=baseline ALIGN=left><B><A NAME="1193293">
<B>Method
</B></A><B><TH VALIGN=baseline ALIGN=left><B><A NAME="1193295">
<B>Description
</B></A><B>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193300"><A HREF="array.htm#1194827"><CODE>concat</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193302">
Joins two arrays and returns a new array. </A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193307"><A HREF="array.htm#1195456"><CODE>join</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193309">
Joins all elements of an array into a string.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193314"><A HREF="array.htm#1196003"><CODE>pop</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193316">
Removes the last element from an array and returns that element.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193321"><A HREF="array.htm#1196550"><CODE>push</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193323">
Adds one or more elements to the end of an array and returns the new length of the array.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193328"><A HREF="array.htm#1193641"><CODE>reverse</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193330">
Transposes the elements of an array: the first array element becomes the last and the last becomes the first.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193335"><A HREF="array.htm#1193677"><CODE>shift</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193337">
Removes the first element from an array and returns that element</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193342"><A HREF="array.htm#1193713"><CODE>slice</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193344">
Extracts a section of an array and returns a new array.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193349"><A HREF="array.htm#1193766"><CODE>splice</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193351">
Adds and/or removes elements from an array.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193356"><A HREF="array.htm#1196882"><CODE>sort</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193358">
Sorts the elements of an array.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193363"><A HREF="array.htm#1193889"><CODE>toSource</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193365">
Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the <A HREF="object.htm#1193320"><CODE>Object.toSource</CODE></A> method.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193370"><A HREF="array.htm#1193921"><CODE>toString</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193372">
Returns a string representing the array and its elements. Overrides the <A HREF="object.htm#1193350"><CODE>Object.toString</CODE></A> method.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193377"><A HREF="array.htm#1193964"><CODE>unshift</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193379">
Adds one or more elements to the front of an array and returns the new length of the array.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1202673"><A HREF="array.htm#1202613"><CODE>valueOf</CODE></A></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1202675">
Returns the primitive value of the array. Overrides the <A HREF="object.htm#1193540"><CODE>Object.valueOf</CODE></A> method.</A></P>

</TABLE>
<TABLE>
<TR><TD>
</TABLE>
</A></P>
<A NAME="1201266">
In addition, this object inherits the <A HREF="object.htm#1193628"><CODE>watch</CODE></A> and <A HREF="object.htm#1193499"><CODE>unwatch</CODE></A> methods from <A HREF="object.htm#1193136"><CODE>Object</CODE></A>.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193381">
 Examples
</A></H4>

<A NAME="1193382">
<B>Example 1.</B> The following example creates an array, <CODE>msgArray</CODE>, with a length of 0, then assigns values to <CODE>msgArray[0]</CODE> and <CODE>msgArray[99]</CODE>, changing the length of the array to 100.</A></P>
<PRE><A NAME="1193383">msgArray = new Array()<br>msgArray[0] = "Hello"<br>msgArray[99] = "world"<br>// The following statement is true,<br>// because defined msgArray[99] element.<br>if (msgArray.length == 100) <br>&nbsp;&nbsp;&nbsp;myVar="The length is 100."</A></PRE><A NAME="1217014">
See also the examples for <A HREF="handlers.htm#1120097"><CODE>onError</CODE></A>.</A></P>
<A NAME="1193388">
<B>Example 2: Two-dimensional array.</B> The following code creates a two-dimensional array and assigns the results to <CODE>myVar</CODE>.</A></P>
<PRE><A NAME="1193389">myVar="Multidimensional array test; "<br>a = new Array(4)<br>for (i=0; i &lt; 4; i++) {<br>&nbsp;&nbsp;&nbsp;a[i] = new Array(4)<br>&nbsp;&nbsp;&nbsp;for (j=0; j &lt; 4; j++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i][j] = "["+i+","+j+"]"<br>&nbsp;&nbsp;&nbsp;}<br>}<br>for (i=0; i &lt; 4; i++) {<br>&nbsp;&nbsp;&nbsp;str = "Row "+i+":"<br>&nbsp;&nbsp;&nbsp;for (j=0; j &lt; 4; j++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str += a[i][j]<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;myVar += str +"; "<br>}</A></PRE><A NAME="1193390">
This example assigns the following string to <CODE>myVar</CODE> (line breaks are used here for readability):</A></P>
<PRE><A NAME="1193391">Multidimensional array test;<br>Row 0:[0,0][0,1][0,2][0,3];<br>Row 1:[1,0][1,1][1,2][1,3];<br>Row 2:[2,0][2,1][2,2][2,3];<br>Row 3:[3,0][3,1][3,2][3,3];</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1217019">
 See also
</A></H4>

<A NAME="1217023">
<A HREF="image.htm#1193137"><CODE>Image</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1194827">
concat
</A></H2>

<A NAME="1194841">
Joins two arrays and returns a new array. <TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1198289">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1198294">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1198296">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1198298">
JavaScript 1.2, NES 3.0</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1194842">
 Syntax
</A></H4>

<PRE><A NAME="1194843">concat(<I>arrayName2</I>, <I>arrayName3</I>, ..., <I>arrayNameN</I>)</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1194844">
 Parameters
</A></H4>

<A NAME="1194850">
<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1194847">arrayName2...<br>arrayName<I>N</I></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1194849">
Arrays to concatenate to this array.</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1194851">
 Description
</A></H4>

<A NAME="1194852">
<CODE>concat</CODE> does not alter the original arrays, but returns a "one level deep" copy that contains copies of the same elements combined from the original arrays. Elements of the original arrays are copied into the new array as follows: </A></P>
<ul><P><LI><A NAME="1194853">
Object references (and not the actual object): <CODE>concat</CODE> copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.</A></LI>
<P><LI><A NAME="1194860">
Strings and numbers (not <A HREF="string.htm#1193137"><CODE>String</CODE></A> and <A HREF="number.htm#1193137"><CODE>Number</CODE></A> objects): <CODE>concat</CODE> copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other arrays.</A></LI>
</ul><A NAME="1194861">
If a new element is added to either array, the other array is not affected.</A></P>
<A NAME="1212871">
The following code concatenates two arrays:</A></P>
<PRE><A NAME="1212906">alpha=new Array("a","b","c")<br>numeric=new Array(1,2,3)<br>alphaNumeric=alpha.concat(numeric) // creates array ["a","b","c",1,2,3]</A></PRE><A NAME="1213112">
The following code concatenates three arrays:</A></P>
<PRE><A NAME="1213022">num1=[1,2,3]<br>num2=[4,5,6]<br>num3=[7,8,9]<br>nums=num1.concat(num2,num3) // creates array [1,2,3,4,5,6,7,8,9]</A></PRE>
<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1206131">
constructor
</A></H2>

<A NAME="1206132">
Specifies the function that creates an object's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1206135">
<I>Property of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1206140">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1206142">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1206144">
JavaScript 1.1, NES 2.0</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1206146">
<I>ECMA version</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1206148">
ECMA-262</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1206149">
 Description
</A></H4>

<A NAME="1206150">
See <A HREF="object.htm#1193229"><CODE>Object.constructor</CODE></A>.</A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1217239">
index
</A></H2>

<A NAME="1193401">
For an array created by a regular expression match, the zero-based index of the match in the string.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193404">
<I>Property of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193409">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left COLSPAN=2 ROWSPAN=1><P><A NAME="1193411">
<I>Static</I></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193415">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193417">
JavaScript 1.2, NES 3.0</A></P>

</TABLE>
</A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1193419">
input
</A></H2>

<A NAME="1197743">
For an array created by a regular expression match, reflects the original string against which the regular expression was matched.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193424">
<I>Property of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193429">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left COLSPAN=2 ROWSPAN=1><P><A NAME="1193431">
<I>Static</I></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193435">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193437">
JavaScript 1.2, NES 3.0</A></P>

</TABLE>
</A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1195456">
join
</A></H2>

<A NAME="1195470">
Joins all elements of an array into a string.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1195460">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1195465">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1195467">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1195469">
JavaScript 1.1, NES 2.0</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1198304">
<I>ECMA version</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1198306">
ECMA-262</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1195471">
 Syntax
</A></H4>

<PRE><A NAME="1195472">join(<I>separator</I>)</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1195473">
 Parameters
</A></H4>

<A NAME="1195479">
<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1195476">separator</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1195478">
Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma.</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1195480">
 Description
</A></H4>

<A NAME="1195481">
The string conversions of all array elements are joined into one string.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1195482">
 Examples
</A></H4>

<A NAME="1195483">
The following example creates an array, <CODE>a</CODE>, with three elements, then joins the array three times: using the default separator, then a comma and a space, and then a plus.</A></P>
<PRE><A NAME="1206975">a = new Array("Wind","Rain","Fire")<br>myVar1=a.join()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// assigns "Wind,Rain,Fire" to myVar1<br>myVar2=a.join(", ")&nbsp;&nbsp;// assigns "Wind, Rain, Fire" to myVar1<br>myVar3=a.join(" + ")&nbsp;// assigns "Wind + Rain + Fire" to myVar1</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1195487">
 See also
</A></H4>

<A NAME="1195491">
<A HREF="array.htm#1193641"><CODE>Array.reverse</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1193439">
length
</A></H2>

<A NAME="1193454">
An unsigned, 32-bit integer that specifies the number of elements in an array.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193443">
<I>Property of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193448">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193450">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193452">
JavaScript 1.1, NES 2.0</A></P><P><A NAME="1198137">
</A></P><P><A NAME="1193453">
JavaScript 1.3: <CODE>length</CODE> is an unsigned, 32-bit integer with a value less than 2<SUP>32</SUP>.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1198337">
<I>ECMA version</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1198339">
ECMA-262</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193455">
 Description
</A></H4>

<A NAME="1193456">
The value of the <CODE>length</CODE> property is an integer with a positive sign and a value less than 2 to the 32 power (2<SUP>32</SUP>).</A></P>
<A NAME="1193457">
You can set the <CODE>length</CODE> property to truncate an array at any time. When you extend an array by changing its <CODE>length</CODE> property, the number of actual elements does not increase; for example, if you set <CODE>length</CODE> to 3 when it is currently 2, the array still contains only 2 elements.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193458">
 Examples
</A></H4>

<A NAME="1213262">
In the following example, the <CODE>getChoice</CODE> function uses the <CODE>length</CODE> property to iterate over every element in the <CODE>musicType</CODE> array. <CODE>musicType</CODE> is a select element on the <CODE>musicForm</CODE> form.</A></P>
<PRE><A NAME="1213264">function getChoice() {<br>&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; document.musicForm.musicType.length; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.musicForm.musicType.options[i].selected == true) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return document.musicForm.musicType.options[i].text<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>}</A></PRE><A NAME="1193461">
The following example shortens the array <CODE>statesUS</CODE> to a length of 50 if the current length is greater than 50.</A></P>
<PRE><A NAME="1193462">if (statesUS.length &gt; 50) {<br>&nbsp;&nbsp;&nbsp;statesUS.length=50<br>}</A></PRE>
<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1196003">
pop
</A></H2>

<A NAME="1196005">
Removes the last element from an array and returns that element. This method changes the length of the array.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1196008">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1196013">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1196015">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1196017">
JavaScript 1.2, NES 3.0</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1196018">
 Syntax
</A></H4>

<PRE><A NAME="1196019">pop()</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1196020">
 Parameters
</A></H4>

<A NAME="1196021">
None. </A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1196022">
 Example
</A></H4>

<A NAME="1196023">
The following code creates the <CODE>myFish</CODE> array containing four elements, then removes its last element.</A></P>
<PRE><A NAME="1196024">myFish = ["angel", "clown", "mandarin", "surgeon"];<br>popped = myFish.pop();</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1196027">
 See also
</A></H4>

<A NAME="1196037">
<A HREF="array.htm#1196550"><CODE>push</CODE></A>, <A HREF="array.htm#1193677"><CODE>shift</CODE></A>, <A HREF="array.htm#1193964"><CODE>unshift</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1205871">
prototype
</A></H2>

<A NAME="1205872">
Represents the prototype for this class. You can use the prototype to add properties or methods to all instances of a class. For information on prototypes, see <A HREF="function.htm#1193426"><CODE>Function.prototype</CODE></A>.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1205878">
<I>Property of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1205883">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1205885">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1205887">
JavaScript 1.1, NES 2.0</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1205889">
<I>ECMA version</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1205891">
ECMA-262</A></P>

</TABLE>
</A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1196550">
push
</A></H2>

<A NAME="1196552">
Adds one or more elements to the end of an array and returns the new length of the array. This method changes the length of the array. <TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1196555">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1196560">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1196562">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1196564">
JavaScript 1.2, NES 3.0</A></P><P><A NAME="1208293">
</A></P><P><A NAME="1208306">
JavaScript 1.3: <CODE>push</CODE> returns the new length of the array rather than the last element added to the array.</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1196565">
 Syntax
</A></H4>

<PRE><A NAME="1196566">push(<I>element1</I>, ..., <I>elementN</I>)</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1196567">
 Parameters
</A></H4>

<A NAME="1196573">
<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1196570">element1, ...,<br>element<I>N</I></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1196572">
The elements to add to the end of the array.</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1196574">
 Description
</A></H4>

<A NAME="1196575">
The behavior of the <CODE>push</CODE> method is analogous to the <CODE>push</CODE> function in Perl&nbsp;4. Note that this behavior is different in Perl&nbsp;5.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1196576">
 Backward Compatibility
</A></H4>

<B><A NAME="HeadRunIn;"></A>
<A NAME="1196577">
JavaScript 1.2. </A></B><A NAME="1196578">
The <CODE>push</CODE> method returns the last element added to an array.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1196579">
 Example
</A></H4>

<A NAME="1207690">
The following code creates the <CODE>myFish</CODE> array containing two elements, then adds two elements to it. After the code executes, <CODE>pushed</CODE> contains 4. (In JavaScript 1.2, <CODE>pushed</CODE> contains "lion" after the code executes.)</A></P>
<PRE><A NAME="1196581">myFish = ["angel", "clown"];<br>pushed = myFish.push("drum", "lion");</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1196584">
 See also
</A></H4>

<A NAME="1196594">
<A HREF="array.htm#1196003"><CODE>pop</CODE></A>, <A HREF="array.htm#1193677"><CODE>shift</CODE></A>, <A HREF="array.htm#1193964"><CODE>unshift</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1193641">
reverse
</A></H2>

<A NAME="1193642">
Transposes the elements of an array: the first array element becomes the last and the last becomes the first.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193645">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193650">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193652">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193654">
JavaScript 1.1, NES 2.0</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1198396">
<I>ECMA version</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1198398">
ECMA-262</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193655">
 Syntax
</A></H4>

<PRE><A NAME="1193656">reverse()</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193657">
 Parameters
</A></H4>

<A NAME="1193658">
None</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193659">
 Description
</A></H4>

<A NAME="1193660">
The <CODE>reverse</CODE> method transposes the elements of the calling array object.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193661">
 Examples
</A></H4>

<A NAME="1193662">
The following example creates an array <CODE>myArray</CODE>, containing three elements, then reverses the array.</A></P>
<PRE><A NAME="1193663">myArray = new Array("one", "two", "three")<br>myArray.reverse()</A></PRE><A NAME="1193664">
This code changes <CODE>myArray</CODE> so that:</A></P>
<ul><LI><A NAME="1193665">
<CODE>myArray[0]</CODE> is <CODE>"three"</CODE>
</A></LI><LI><A NAME="1193666">
<CODE>myArray[1]</CODE> is <CODE>"two"</CODE>
</A></LI><LI><A NAME="1193667">
<CODE>myArray[2]</CODE> is <CODE>"one"</CODE>
</A></LI></ul>
<H4><A NAME="Head3;"></A>
<A NAME="1193668">
 See also
</A></H4>

<A NAME="1193675">
<A HREF="array.htm#1195456"><CODE>Array.join</CODE></A>, <A HREF="array.htm#1196882"><CODE>Array.sort</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1193677">
shift
</A></H2>

<A NAME="1193679">
Removes the first element from an array and returns that element. This method changes the length of the array.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193682">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193687">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193689">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193691">
JavaScript 1.2, NES 3.0</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193692">
 Syntax
</A></H4>

<PRE><A NAME="1193693">shift()</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193694">
 Parameters
</A></H4>

<A NAME="1193695">
None.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193696">
 Example
</A></H4>

<A NAME="1193697">
The following code displays the <CODE>myFish</CODE> array before and after removing its first element. It also displays the removed element:</A></P>
<PRE><A NAME="1193698">myFish = ["angel", "clown", "mandarin", "surgeon"];<br>document.writeln("myFish before: " + myFish);<br>shifted = myFish.shift();<br>document.writeln("myFish after: " + myFish);<br>document.writeln("Removed this element: " + shifted);</A></PRE><A NAME="1193699">
This example displays the following:</A></P>
<PRE><A NAME="1193700">myFish before: ["angel", "clown", "mandarin", "surgeon"]<br>myFish after: ["clown", "mandarin", "surgeon"]<br>Removed this element: angel</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193701">
 See also
</A></H4>

<A NAME="1193711">
<A HREF="array.htm#1196003"><CODE>pop</CODE></A>, <A HREF="array.htm#1196550"><CODE>push</CODE></A>, <A HREF="array.htm#1193964"><CODE>unshift</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1193713">
slice
</A></H2>

<A NAME="1193727">
Extracts a section of an array and returns a new array. <TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193717">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193722">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193724">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193726">
JavaScript 1.2, NES 3.0</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193728">
 Syntax
</A></H4>

<PRE><A NAME="1193729">slice(<I>begin</I>[,<I>end</I>])</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193730">
 Parameters
</A></H4>

<A NAME="1193743">
<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193733">begin</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193735">
Zero-based index at which to begin extraction.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193737">end</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193739">
Zero-based index at which to end extraction:</A></P><ul></P><LI><A NAME="1193740">
<CODE>slice</CODE> extracts up to but not including <CODE>end</CODE>. <CODE>slice(1,4)</CODE> extracts the second element through the fourth element (elements indexed 1, 2, and 3)</A></P><LI><A NAME="1193741">
As a negative index, <CODE>end</CODE> indicates an offset from the end of the sequence. <CODE>slice(2,-1)</CODE> extracts the third element through the second to last element in the sequence.</A></P><LI><A NAME="1193742">
If <CODE>end</CODE> is omitted, <CODE>slice</CODE> extracts to the end of the sequence.</A></ul>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193744">
 Description
</A></H4>

<A NAME="1193745">
<CODE>slice</CODE> does not alter the original array, but returns a new "one level deep" copy that contains copies of the elements sliced from the original array. Elements of the original array are copied into the new array as follows:</A></P>
<ul><P><LI><A NAME="1193746">
For object references (and not the actual object), <CODE>slice</CODE> copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.</A></LI>
<P><LI><A NAME="1193753">
For strings and numbers (not <A HREF="string.htm#1193137"><CODE>String</CODE></A> and <A HREF="number.htm#1193137"><CODE>Number</CODE></A> objects), <CODE>slice</CODE> copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other array.</A></LI>
</ul><A NAME="1193754">
If a new element is added to either array, the other array is not affected.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193755">
 Example
</A></H4>

<A NAME="1193756">
In the following example, <CODE>slice</CODE> creates a new array, <CODE>newCar</CODE>, from <CODE>myCar</CODE>. Both include a reference to the object <CODE>myHonda</CODE>. When the color of <CODE>myHonda</CODE> is changed to <CODE>purple</CODE>, both arrays reflect the change.</A></P>
<PRE><A NAME="1193757">&lt;SCRIPT LANGUAGE="JavaScript1.2"&gt;</A></PRE><PRE><A NAME="1193758">//Using slice, create newCar from myCar.<br>myHonda = {color:"red",wheels:4,engine:{cylinders:4,size:2.2}} <br>myCar = [myHonda, 2, "cherry condition", "purchased 1997"] <br>newCar = myCar.slice(0,2)</A></PRE><PRE><A NAME="1193759">//Write the values of myCar, newCar, and the color of myHonda <br>// referenced from both arrays.<br>document.write("myCar = " + myCar + "&lt;BR&gt;")<br>document.write("newCar = " + newCar + "&lt;BR&gt;") <br>document.write("myCar[0].color = " + myCar[0].color + "&lt;BR&gt;") <br>document.write("newCar[0].color = " + newCar[0].color + "&lt;BR&gt;&lt;BR&gt;")</A></PRE><PRE><A NAME="1193760">//Change the color of myHonda.<br>myHonda.color = "purple"<br>document.write("The new color of my Honda is " + myHonda.color + "&lt;BR&gt;&lt;BR&gt;")</A></PRE><PRE><A NAME="1193761">//Write the color of myHonda referenced from both arrays.<br>document.write("myCar[0].color = " + myCar[0].color + "&lt;BR&gt;") <br>document.write("newCar[0].color = " + newCar[0].color + "&lt;BR&gt;")</A></PRE><PRE><A NAME="1193762">&lt;/SCRIPT&gt;</A></PRE><A NAME="1193763">
This script writes: </A></P>
<PRE><A NAME="1193764">myCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2,<br>&nbsp;&nbsp;&nbsp;"cherry condition", "purchased 1997"] <br>newCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2] <br>myCar[0].color = red newCar[0].color = red <br>The new color of my Honda is purple <br>myCar[0].color = purple <br>newCar[0].color = purple </A></PRE>
<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1196882">
sort
</A></H2>

<A NAME="1196896">
Sorts the elements of an array. <TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1196886">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1196891">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1196893">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1196895">
JavaScript 1.1, NES 2.0</A></P><P><A NAME="1198173">
</A></P><P><A NAME="1198174">
JavaScript 1.2: modified behavior.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1198419">
<I>ECMA version</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1198421">
ECMA-262</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1196897">
 Syntax
</A></H4>

<PRE><A NAME="1196898">sort(<I>compareFunction</I>)</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1196899">
 Parameters
</A></H4>

<A NAME="1196905">
<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1196902">compareFunction</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1196904">
Specifies a function that defines the sort order. If omitted, the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1196906">
 Description
</A></H4>

<A NAME="1196907">
If <CODE>compareFunction</CODE> is not supplied, elements are sorted by converting them to strings and comparing strings in lexicographic ("dictionary" or "telephone book," <I>not</I> numerical) order. For example, "80" comes before "9" in lexicographic order, but in a numeric sort 9 comes before 80.</A></P>
<A NAME="1196908">
If <CODE>compareFunction</CODE> is supplied, the array elements are sorted according to the return value of the compare function. If a and b are two elements being compared, then:</A></P>
<ul><P><LI><A NAME="1196909">
If <CODE>compareFunction(a, b)</CODE> is less than 0, sort <CODE>b</CODE> to a lower index than <CODE>a</CODE>.</A></LI>
<P><LI><A NAME="1196910">
If <CODE>compareFunction(a, b)</CODE> returns 0, leave <CODE>a</CODE> and <CODE>b</CODE> unchanged with respect to each other, but sorted with respect to all different elements.</A></LI>
<P><LI><A NAME="1196911">
If <CODE>compareFunction(a, b)</CODE> is greater than 0, sort <CODE>b</CODE> to a higher index than <CODE>a</CODE>.</A></LI>
</ul><A NAME="1196912">
So, the compare function has the following form:</A></P>
<PRE><A NAME="1196913">function compare(a, b) {<br>&nbsp;&nbsp;&nbsp;if (a is less than b by some ordering criterion)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1<br>&nbsp;&nbsp;&nbsp;if (a is greater than b by the ordering criterion)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1<br>&nbsp;&nbsp;&nbsp;// a must be equal to b<br>&nbsp;&nbsp;&nbsp;return 0<br>}</A></PRE><A NAME="1196914">
To compare numbers instead of strings, the compare function can simply subtract b from a:</A></P>
<PRE><A NAME="1196915">function compareNumbers(a, b) {<br>&nbsp;&nbsp;&nbsp;return a - b<br>}</A></PRE><A NAME="1196916">
JavaScript uses a stable sort: the index partial order of a and b does not change if a and b are equal. If a's index was less than b's before sorting, it will be after sorting, no matter how a and b move due to sorting.</A></P>
<A NAME="1196917">
The behavior of the <CODE>sort</CODE> method changed between JavaScript&nbsp;1.1 and 
JavaScript&nbsp;1.2.
</A>
</BLOCKQUOTE>
<A NAME="1196918">
In JavaScript&nbsp;1.1, on some platforms, the sort method does not work. This method works on all platforms for JavaScript&nbsp;1.2.</A></P>
<A NAME="1196919">
In JavaScript 1.2, this method no longer converts undefined elements to null; instead it sorts them to the high end of the array. For example, assume you have this script:</A></P>
<PRE><A NAME="1196920">&lt;SCRIPT&gt;<br>a = new Array();<br>a[0] = "Ant";<br>a[5] = "Zebra";</A></PRE><PRE><A NAME="1196921">function writeArray(x) {<br>&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; x.length; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.write(x[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i &lt; x.length-1) document.write(", ");<br>&nbsp;&nbsp;&nbsp;}<br>}</A></PRE><PRE><A NAME="1197382">writeArray(a);<br>a.sort();<br>document.write("&lt;BR&gt;&lt;BR&gt;");<br>writeArray(a);<br>&lt;/SCRIPT&gt;</A></PRE><A NAME="1197383">
In JavaScript 1.1, JavaScript prints:</A></P>
<PRE><A NAME="1197384">ant, null, null, null, null, zebra <br>ant, null, null, null, null, zebra</A></PRE><A NAME="1196925">
In JavaScript 1.2, JavaScript prints:</A></P>
<PRE><A NAME="1196926">ant, undefined, undefined, undefined, undefined, zebra <br>ant, zebra, undefined, undefined, undefined, undefined</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1196927">
 Examples
</A></H4>

<A NAME="1196928">
The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function.</A></P>
<PRE><A NAME="1196929">&lt;SCRIPT&gt;<br>stringArray = new Array("Blue","Humpback","Beluga")<br>numericStringArray = new Array("80","9","700")<br>numberArray = new Array(40,1,5,200)<br>mixedNumericArray = new Array("80","9","700",40,1,5,200)</A></PRE><PRE><A NAME="1196930">function compareNumbers(a, b) {<br>&nbsp;&nbsp;&nbsp;return a - b<br>}</A></PRE><PRE><A NAME="1196931">document.write("&lt;B&gt;stringArray:&lt;/B&gt; " + stringArray.join() +"&lt;BR&gt;")<br>document.write("&lt;B&gt;Sorted:&lt;/B&gt; " + stringArray.sort() +"&lt;P&gt;")</A></PRE><PRE><A NAME="1196932">document.write("&lt;B&gt;numberArray:&lt;/B&gt; " + numberArray.join() +"&lt;BR&gt;")<br>document.write("&lt;B&gt;Sorted without a compare function:&lt;/B&gt; " + numberArray.sort() +"&lt;BR&gt;")<br>document.write("&lt;B&gt;Sorted with compareNumbers:&lt;/B&gt; " + numberArray.sort(compareNumbers) +"&lt;P&gt;")</A></PRE><PRE><A NAME="1196933">document.write("&lt;B&gt;numericStringArray:&lt;/B&gt; " + numericStringArray.join() +"&lt;BR&gt;")<br>document.write("&lt;B&gt;Sorted without a compare function:&lt;/B&gt; " + numericStringArray.sort() +"&lt;BR&gt;")<br>document.write("&lt;B&gt;Sorted with compareNumbers:&lt;/B&gt; " + numericStringArray.sort(compareNumbers) +"&lt;P&gt;")</A></PRE><PRE><A NAME="1196934">document.write("&lt;B&gt;mixedNumericArray:&lt;/B&gt; " + mixedNumericArray.join() +"&lt;BR&gt;")<br>document.write("&lt;B&gt;Sorted without a compare function:&lt;/B&gt; " + mixedNumericArray.sort() +"&lt;BR&gt;")<br>document.write("&lt;B&gt;Sorted with compareNumbers:&lt;/B&gt; " + mixedNumericArray.sort(compareNumbers) +"&lt;BR&gt;")<br>&lt;/SCRIPT&gt;</A></PRE><A NAME="1196935">
This example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.</A></P>
<PRE><A NAME="1196936"><B>stringArray:</B> Blue,Humpback,Beluga<br><B>Sorted:</B> Beluga,Blue,Humpback</A></PRE><PRE><A NAME="1196937"><B>numberArray:</B> 40,1,5,200<br><B>Sorted without a compare function:</B> 1,200,40,5<br><B>Sorted with compareNumbers:</B> 1,5,40,200</A></PRE><PRE><A NAME="1196938"><B>numericStringArray:</B> 80,9,700<br><B>Sorted without a compare function:</B> 700,80,9<br><B>Sorted with compareNumbers:</B> 9,80,700</A></PRE><PRE><A NAME="1196939"><B>mixedNumericArray:</B> 80,9,700,40,1,5,200<br><B>Sorted without a compare function:</B> 1,200,40,5,700,80,9<br><B>Sorted with compareNumbers:</B> 1,5,9,40,80,200,700</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1196940">
 See also
</A></H4>

<A NAME="1196947">
<A HREF="array.htm#1195456"><CODE>Array.join</CODE></A>, <A HREF="array.htm#1193641"><CODE>Array.reverse</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1193766">
splice
</A></H2>

<A NAME="1193768">
Changes the content of an array, adding new elements while removing old elements.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193771">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193776">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193778">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193780">
JavaScript 1.2, NES 3.0</A></P><P><A NAME="1217299">
</A></P><P><A NAME="1217300">
JavaScript 1.3: returns an array containing the removed elements</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193781">
 Syntax
</A></H4>

<PRE><A NAME="1193782">splice(<I>index</I>, <I>howMany</I>, [element1][, ..., <I>elementN</I>])</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193783">
 Parameters
</A></H4>

<A NAME="1193797">
<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193786">index</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193788">
Index at which to start changing the array.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193790">howMany</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193792">
An integer indicating the number of old array elements to remove. If <CODE>howMany</CODE> is 0, no elements are removed. In this case, you should specify at least one new element.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193794">element1, ...,<br>element<I>N</I></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193796">
The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193798">
 Description
</A></H4>

<A NAME="1193799">
If you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call.</A></P>
<A NAME="1193800">
The <CODE>splice</CODE> method returns an array containing the removed elements. If only one element is removed, an array of one element is returned</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193801">
 Backward Compatibility
</A></H4>

<B><A NAME="HeadRunIn;"></A>
<A NAME="1193802">
JavaScript 1.2. </A></B><A NAME="1193803">
The <CODE>splice</CODE> method returns the element removed, if only one element is removed (<CODE>howMany</CODE> parameter is 1); otherwise, the method returns an array containing the removed elements.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193804">
 Examples
</A></H4>

<A NAME="1193805">
The following script illustrate the use of <CODE>splice</CODE>:</A></P>
<PRE><A NAME="1193806">&lt;SCRIPT LANGUAGE="JavaScript1.2"&gt;</A></PRE><PRE><A NAME="1193807">myFish = ["angel", "clown", "mandarin", "surgeon"];<br>document.writeln("myFish: " + myFish + "&lt;BR&gt;");</A></PRE><PRE><A NAME="1193808">removed = myFish.splice(2, 0, "drum");<br>document.writeln("After adding 1: " + myFish);<br>document.writeln("removed is: " + removed + "&lt;BR&gt;");</A></PRE><PRE><A NAME="1193809">removed = myFish.splice(3, 1)<br>document.writeln("After removing 1: " + myFish);<br>document.writeln("removed is: " + removed + "&lt;BR&gt;");</A></PRE><PRE><A NAME="1193810">removed = myFish.splice(2, 1, "trumpet")<br>document.writeln("After replacing 1: " + myFish);<br>document.writeln("removed is: " + removed + "&lt;BR&gt;");</A></PRE><PRE><A NAME="1193811">removed = myFish.splice(0, 2, "parrot", "anemone", "blue")<br>document.writeln("After replacing 2: " + myFish);<br>document.writeln("removed is: " + removed);</A></PRE><PRE><A NAME="1193812">&lt;/SCRIPT&gt;</A></PRE><A NAME="1193813">
This script displays:</A></P>
<PRE><A NAME="1193814">myFish: ["angel", "clown", "mandarin", "surgeon"]</A></PRE><PRE><A NAME="1193815">After adding 1: ["angel", "clown", "drum", "mandarin", "surgeon"]<br>removed is: undefined</A></PRE><PRE><A NAME="1193816">After removing 1: ["angel", "clown", "drum", "surgeon"]<br>removed is: mandarin</A></PRE><PRE><A NAME="1193817">After replacing 1: ["angel", "clown", "trumpet", "surgeon"]<br>removed is: drum</A></PRE><PRE><A NAME="1193818">After replacing 2: ["parrot", "anemone", "blue", "trumpet", "surgeon"]<br>removed is: ["angel", "clown"]</A></PRE>
<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1193889">
toSource
</A></H2>

<A NAME="1193891">
Returns a string representing the source code of the array.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193894">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193899">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193901">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193903">
JavaScript 1.3</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193904">
 Syntax
</A></H4>

<PRE><A NAME="1193905">toSource()</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193906">
 Parameters
</A></H4>

<A NAME="1193907">
None</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193908">
 Description
</A></H4>

<A NAME="1213327">
The <CODE>toSource</CODE> method returns the following values:</A></P>
<ul><LI><A NAME="1213328">
For the built-in <CODE>Array</CODE> object, <CODE>toSource</CODE> returns the following string indicating that the source code is not available:
</A></LI><PRE><A NAME="1213329">&nbsp;&nbsp;&nbsp;function Array() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[native code]<br>&nbsp;&nbsp;&nbsp;}</A></PRE><LI><A NAME="1213330">
For instances of <CODE>Array</CODE>, <CODE>toSource</CODE> returns a string representing the source code.
</A></LI></ul><A NAME="1213381">
This method is usually called internally by JavaScript and not explicitly in code. You can call <CODE>toSource</CODE> while debugging to examine the contents of an array.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1206391">
 Examples
</A></H4>

<A NAME="1206392">
To examine the source code of an array:</A></P>
<PRE><A NAME="1213533">alpha = new Array("a", "b", "c")<br>alpha.toSource() //returns ["a", "b", "c"]</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1201796">
 See also
</A></H4>

<A NAME="1193918">
<A HREF="array.htm#1193921"><CODE>Array.toString</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1193921">
toString
</A></H2>

<A NAME="1193934">
Returns a string representing the specified array and its elements.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193924">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193929">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193931">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193933">
JavaScript 1.1, NES 2.0</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1198430">
<I>ECMA version</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1198432">
ECMA-262</A></P>

</TABLE>
 </A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193935">
 Syntax
</A></H4>

<PRE><A NAME="1193936">toString()</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193937">
 Parameters
</A></H4>

<A NAME="1193938">
None.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193939">
 Description
</A></H4>

<A NAME="1193940">
The <A HREF="array.htm#1193137"><CODE>Array</CODE></A> object overrides the <CODE>toString</CODE> method of <A HREF="object.htm#1193136"><CODE>Object</CODE></A>. For <A HREF="array.htm#1193137"><CODE>Array</CODE></A> objects, the <CODE>toString</CODE> method joins the array and returns one string containing each array element separated by commas. For example, the following code creates an array and uses <CODE>toString</CODE> to convert the array to a string.</A></P>
<PRE><A NAME="1193946">var monthNames = new Array("Jan","Feb","Mar","Apr")<br>myVar=monthNames.toString() // assigns "Jan,Feb,Mar,Apr" to myVar</A></PRE><A NAME="1202005">
JavaScript calls the <CODE>toString</CODE> method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193953">
 Backward Compatibility
</A></H4>

<B><A NAME="HeadRunIn;"></A>
<A NAME="1193954">
JavaScript 1.2. </A></B><A NAME="1193955">
In JavaScript 1.2 and earlier versions, <CODE>toString</CODE> returns a string representing the source code of the array. This value is the same as the value returned by the <CODE>toSource</CODE> method in JavaScript 1.3 and later versions.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193958">
 See also
</A></H4>

<A NAME="1193962">
<A HREF="array.htm#1193889"><CODE>Array.toSource</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1193964">
unshift
</A></H2>

<A NAME="1193966">
Adds one or more elements to the beginning of an array and returns the new length of the array. <TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193969">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193974">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1193976">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1193978">
JavaScript 1.2, NES 3.0</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193979">
 Syntax
</A></H4>

<PRE><A NAME="1193980">arrayName.unshift(<I>element1</I>,..., <I>elementN</I>)</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193981">
 Parameters
</A></H4>

<A NAME="1193987">
<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1193984">element1,...,<br>element<I>N</I></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1193986">
The elements to add to the front of the array.</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1193988">
 Example
</A></H4>

<A NAME="1193989">
The following code displays the <CODE>myFish</CODE> array before and after adding elements to it.</A></P>
<PRE><A NAME="1193990">myFish = ["angel", "clown"];<br>document.writeln("myFish before: " + myFish);<br>unshifted = myFish.unshift("drum", "lion");<br>document.writeln("myFish after: " + myFish);<br>document.writeln("New length: " + unshifted);</A></PRE><A NAME="1193991">
This example displays the following:</A></P>
<PRE><A NAME="1193992">myFish before: ["angel", "clown"]<br>myFish after: ["drum", "lion", "angel", "clown"]<br>New length: 4</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1193993">
 See also
</A></H4>

<A NAME="1194003">
<A HREF="array.htm#1196003"><CODE>pop</CODE></A>, <A HREF="array.htm#1196550"><CODE>push</CODE></A>, <A HREF="array.htm#1193677"><CODE>shift</CODE></A></A></P>

<HR><H2><A NAME="Head2Ref;"></A>
<A NAME="1202613">
valueOf
</A></H2>

<A NAME="1202630">
Returns the primitive value of an array.<TABLE BORDER="0">
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1202616">
<I>Method of</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1202621">
<A HREF="array.htm#1193137"><CODE>Array</CODE></A></A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1202623">
<I>Implemented in</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1202625">
JavaScript 1.1</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1202627">
<I>ECMA version</I></A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1202629">
ECMA-262</A></P>

</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1202631">
 Syntax
</A></H4>

<PRE><A NAME="1202632">valueOf()</A></PRE>
<H4><A NAME="Head3;"></A>
<A NAME="1202633">
 Parameters
</A></H4>

<A NAME="1202634">
None</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1202635">
 Description
</A></H4>

<A NAME="1202794">
The <A HREF="array.htm#1193137"><CODE>Array</CODE></A> object inherits the <CODE>valueOf</CODE> method of <A HREF="object.htm#1193136"><CODE>Object</CODE></A>. The <CODE>valueOf</CODE> method of <CODE>Array</CODE> returns the primitive value of an array or the primitive value of its elements as follows:</A></P>
<A NAME="1202822">
<P><B></B>
<TABLE BORDER="2" CELLPADDING=5>
<TR><TH VALIGN=baseline ALIGN=left><B><A NAME="1202826">
<B>Object type of element
</B></A><B><TH VALIGN=baseline ALIGN=left><B><A NAME="1202828">
<B>Data type of returned value
</B></A><B>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1202830">
Boolean</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1202832">
Boolean</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1202834">
Number or Date</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1202836">
number</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1202838">
All others</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1202840">
string</A></P>

</TABLE>
<TABLE>
<TR><TD>
</TABLE>
</A></P>
<A NAME="1202884">
This method is usually called internally by JavaScript and not explicitly in code.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1202906">
 See also
</A></H4>

<A NAME="1202656">
<A HREF="object.htm#1193540"><CODE>Object.valueOf</CODE></A></A></P>

<HR>

<FONT SIZE=-1><A HREF="contents.htm">Table of Contents</A> | <A HREF="area.htm">Previous</A>
 | <A HREF="boolean.htm">Next</A>
 | <A HREF="bklast.htm">Index</A>
</FONT>
<P ALIGN=right>
<FONT SIZE=-2><I>Last Updated:  05/28/99  11:59:00</I></FONT>
<P> <CENTER>Copyright (c) 1999
<A HREF="http://home.netscape.com/misc/contact_info.html"
TARGET=_top>Netscape Communications Corporation</A></FONT>
</CENTER>
<P>
</BODY>
</HTML>


