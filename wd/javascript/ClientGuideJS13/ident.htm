<HTML>
<HEAD>
<TITLE>Values, Variables, and Literals
</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<FONT SIZE=-1><A HREF="contents.htm">Table of Contents</A> | <A HREF="partcore.htm">Previous</A>
 | <A HREF="expr.htm">Next</A>
 | <A HREF="bklast.htm">Index</A>
</FONT><BR><BR>
<HR>
<A NAME="1008298">
<P></A><CENTER><H2>Chapter 2<BR>
<A NAME="1008302">
Values, Variables, and Literals</A></H2></CENTER>
<A NAME="1008304">
This chapter discusses values that JavaScript recognizes and describes the fundamental building blocks of JavaScript expressions: variables and literals.</A></P>
<A NAME="1009896">
This chapter contains the following sections:</A></P>
<ul><LI><A NAME="1009897">
<A HREF="ident.htm#1008306">Values</A>
</A></LI><LI><A NAME="1009986">
<A HREF="ident.htm#1008330">Variables</A>
</A></LI><LI><A NAME="1010226">
<A HREF="ident.htm#1008348">Literals</A>
</A></LI><LI><A NAME="1010232">
<A HREF="ident.htm#1009568">Unicode</A>
</A></LI></ul>
<HR><H2><A NAME="Values"></A>
<A NAME="1008306">
 Values
</A></H2><A NAME="1008308">
JavaScript recognizes the following types of values:</A></P>
<ul><P><LI><A NAME="1008309">
Numbers, such as 42 or 3.14159.</A></LI>
<P><LI><A NAME="1008310">
Logical (Boolean) values, either <CODE>true</CODE> or <CODE>false</CODE>.</A></LI>
<P><LI><A NAME="1008311">
Strings, such as "Howdy!".</A></LI>
<P><LI><A NAME="1008312">
<CODE>null</CODE>, a special keyword denoting a null value; <CODE>null</CODE> is also a primitive value. Because JavaScript is case sensitive, <CODE>null</CODE> is not the same as <CODE>Null</CODE>, <CODE>NULL</CODE>, or any other variant.</A></LI>
<P><LI><A NAME="1009742">
<CODE>undefined</CODE>, a top-level property whose value is undefined; <CODE>undefined</CODE> is also a primitive value.</A></LI>
</ul><A NAME="1008315">
This relatively small set of types of values, or <I>data types</I>, enables you to perform useful functions with your applications. There is no explicit distinction between integer and real-valued numbers. Nor is there an explicit date data type in JavaScript. However, you can use the <CODE>Date</CODE> object and its methods to handle dates.</A></P>
<A NAME="1008317">
Objects and functions are the other fundamental elements in the language. You can think of objects as named containers for values, and functions as procedures that your application can perform.</A></P>

<H3><A NAME="Head2;"></A>
<A NAME="1008319">
 Data Type Conversion
</A></H3>

<A NAME="1008320">
JavaScript is a dynamically typed language. That means you do not have to specify the data type of a variable when you declare it, and data types are converted automatically as needed during script execution. So, for example, you could define a variable as follows:</A></P>
<PRE><A NAME="1008321">var answer = 42</A></PRE><A NAME="1008322">
And later, you could assign the same variable a string value, for example,</A></P>
<PRE><A NAME="1008323">answer = "Thanks for all the fish..."</A></PRE><A NAME="1008324">
Because JavaScript is dynamically typed, this assignment does not cause an error message.</A></P>
<A NAME="1008325">
In expressions involving numeric and string values with the + operator, JavaScript converts numeric values to strings. For example, consider the following statements:</A></P>
<PRE><A NAME="1008326">x = "The answer is " + 42 // returns "The answer is 42"<br>y = 42 + " is the answer" // returns "42 is the answer"</A></PRE><A NAME="1008327">
In statements involving other operators, JavaScript does not convert numeric values to strings. For example:</A></P>
<PRE><A NAME="1011514">"37" - 7 // returns 30<br>"37" + 7 // returns 377</A></PRE>
<HR><H2><A NAME="Variables"></A>
<A NAME="1008330">
 Variables
</A></H2><A NAME="1008331">
You use variables as symbolic names for values in your application. You give variables names by which you refer to them and which must conform to certain rules.</A></P>
<A NAME="1008333">
A JavaScript identifier, or <I>name,</I> must start with a letter or underscore ("_"); subsequent characters can also be digits (0-9). Because JavaScript is case sensitive, letters include the characters "A" through "Z" (uppercase) and the characters "a" through "z" (lowercase).</A></P>
<A NAME="1008336">
Some examples of legal names are <CODE>Number_hits</CODE>, <CODE>temp99</CODE>, and <CODE>_name</CODE>.</A></P>

<H3><A NAME="Head2;"></A>
<A NAME="1008338">
 Declaring Variables
</A></H3>

<A NAME="1008339">
You can declare a variable in two ways:</A></P>
<ul><P><LI><A NAME="1008340">
By simply assigning it a value. For example, <CODE>x = 42</CODE></A></LI>
<P><LI><A NAME="1008342">
With the keyword <CODE>var.</CODE> For example, <CODE>var x = 42</CODE></A></LI>
</ul>
<H3><A NAME="Head2;"></A>
<A NAME="1012659">
 Evaluating Variables
</A></H3>

<A NAME="1009795">
A variable or array element that has not been assigned a value has the value <CODE>undefined</CODE>. The result of evaluating an unassigned variable depends on how it was declared:</A></P>
<ul><P><LI><A NAME="1012390">
If the unassigned variable was declared without var, the evaluation results in a runtime error.</A></LI>
<P><LI><A NAME="1012441">
If the unassigned variable was declared with var, the evaluation results in the undefined value, or NaN in numeric contexts.</A></LI>
</ul><A NAME="1012776">
The following code demonstrates evaluating unassigned variables.</A></P>
<PRE><A NAME="1012304">function f1() {<br>&nbsp;&nbsp;&nbsp;return y - 2;<br>}<br>f1() //Causes runtime error</A></PRE><PRE><A NAME="1012316">function f2() {<br>&nbsp;&nbsp;&nbsp;return var y - 2;<br>}<br>f2() //returns NaN</A></PRE><A NAME="1012314">
You can use <CODE>undefined</CODE> to determine whether a variable has a value. In the following code, the variable <CODE>input</CODE> is not assigned a value, and the <CODE>if</CODE> statement evaluates to <CODE>true</CODE>.</A></P>
<PRE><A NAME="1009807">var input;<br>if(input === undefined){<br>&nbsp;&nbsp;&nbsp;doThis();<br>} else {<br><CODE>&nbsp;&nbsp;&nbsp;doThat();<br></CODE>}</A></PRE><A NAME="1012352">
The <CODE>undefined</CODE> value behaves as false when used as a Boolean value. For example, the following code executes the function <CODE>myFunction</CODE> because the array element is not defined:</A></P>
<PRE><A NAME="1012353">myArray=new Array()<br>if (!myArray[0])<br>&nbsp;&nbsp;&nbsp;myFunction()</A></PRE><A NAME="1012381">
When you evaluate a null variable, the null value behaves as 0 in numeric contexts and as false in Boolean contexts. For example:</A></P>
<PRE><A NAME="1012678">var n = null<br>n * 32 //returns 0</A></PRE>
<H3><A NAME="Head2;"></A>
<A NAME="1009822">
 Variable Scope
</A></H3>

<A NAME="1008343">
When you set a variable identifier by assignment outside of a function, it is called a <I>global</I> variable, because it is available everywhere in the current document. When you declare a variable within a function, it is called a <I>local</I> variable, because it is available only within the function.</A></P>
<A NAME="1008344">
Using <CODE>var</CODE> to declare a global variable is optional. However, you must use <CODE>var</CODE> to declare a variable inside a function.</A></P>
<A NAME="1008345">
You can access global variables declared in one window or frame from another window or frame by specifying the window or frame name. For example, if a variable called <CODE>phoneNumber</CODE> is declared in a <CODE>FRAMESET</CODE> document, you can refer to this variable from a child frame as <CODE>parent.phoneNumber</CODE>.</A></P>

<HR><H2><A NAME="Literals"></A>
<A NAME="1008348">
 Literals
</A></H2><A NAME="1008349">
You use literals to represent values in JavaScript. These are fixed values, not variables, that you <I>literally</I> provide in your script. This section describes the following types of literals:</A></P>
<ul><LI><A NAME="1009486">
<A HREF="ident.htm#1011655">Array Literals</A>
</A></LI><LI><A NAME="1009494">
<A HREF="ident.htm#1012095">Boolean Literals</A>
</A></LI><LI><A NAME="1009505">
<A HREF="ident.htm#1009427">Floating-Point Literals</A>
</A></LI><LI><A NAME="1009506">
<A HREF="ident.htm#1008351">Integers</A>
</A></LI><LI><A NAME="1009544">
<A HREF="ident.htm#1009450">Object Literals</A>
</A></LI><LI><A NAME="1011652">
<A HREF="ident.htm#1008368">String Literals</A>
</A></LI></ul>
<H3><A NAME="Head2;"></A>
<A NAME="1011655">
 Array Literals
</A></H3>

<A NAME="1011596">
An array literal is a list of zero or more expressions, each of which represents an array element, enclosed in square brackets ([]). When you create an array using an array literal, it is initialized with the specified values as its elements, and its length is set to the number of arguments specified.</A></P>
<A NAME="1012183">
The following example creates the <CODE>coffees</CODE> array with three elements and a length of three:</A></P>
<PRE><A NAME="1012184">coffees = ["French Roast", "Columbian", "Kona"]</A></PRE><BLOCKQUOTE><B>NOTE: </B><A NAME="1012142">
An array literal is a type of object initializer. See <A HREF="obj.htm#1008330">"Using Object Initializers" on 
page&nbsp;101</A>.
</A>
</BLOCKQUOTE>
<A NAME="1011913">
If an array is created using a literal in a top-level script, JavaScript interprets the array each time it evaluates the expression containing the array literal. In addition, a literal used in a function is created each time the function is called.</A></P>
<A NAME="1012089">
Array literals are also <CODE>Array</CODE> objects. See <A HREF="obj.htm#1008453">"Array Object" on page&nbsp;107</A> for details on <CODE>Array</CODE> objects.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1012099">
 Extra Commas in Array Literals
</A></H4>

<A NAME="1012158">
You do not have to specify all elements in an array literal. If you put two commas in a row, the array is created with spaces for the unspecified elements. The following example creates the <CODE>fish</CODE> array:</A></P>
<PRE><A NAME="1012159">fish = ["Lion", , "Angel"]</A></PRE><A NAME="1012160">
This array has two elements with values and one empty element (<CODE>fish[0]</CODE> is "Lion", <CODE>fish[1]</CODE> is undefined, and <CODE>fish[2]</CODE> is "Angel"):</A></P>
<A NAME="1012163">
If you include a trailing comma at the end of the list of elements, the comma is ignored. In the following example, the length of the array is three. There is no <CODE>myList[3]</CODE>. All other commas in the list indicate a new element.</A></P>
<PRE><A NAME="1012105">myList = ['home', , 'school', ];</A></PRE><A NAME="1012106">
In the following example, the length of the array is four, and <CODE>myList[0]</CODE> is missing.</A></P>
<PRE><A NAME="1012107">myList = [ , 'home', , 'school'];</A></PRE><A NAME="1012108">
In the following example, the length of the array is four, and <CODE>myList[3]</CODE> is missing. Only the last comma is ignored. This trailing comma is optional.</A></P>
<PRE><A NAME="1012109">myList = ['home', , 'school', , ];</A></PRE>
<H3><A NAME="Head2;"></A>
<A NAME="1012095">
 Boolean Literals
</A></H3>

<A NAME="1012096">
The Boolean type has two literal values: <CODE>true</CODE> and <CODE>false</CODE>.</A></P>
<A NAME="1012264">
Do not confuse the primitive Boolean values true and false with the true and false values of the Boolean object. The Boolean object is a wrapper around the primitive Boolean data type. See <A HREF="obj.htm#1008502">"Boolean Object" on page&nbsp;111</A> for more information.</A></P>

<H3><A NAME="Head2;"></A>
<A NAME="1009427">
 Floating-Point Literals
</A></H3>

<A NAME="1009428">
A floating-point literal can have the following parts:</A></P>
<ul><LI><A NAME="1009429">
A decimal integer
</A></LI><LI><A NAME="1009430">
A decimal point (".")
</A></LI><LI><A NAME="1009431">
A fraction (another decimal number)
</A></LI><LI><A NAME="1009432">
An exponent
</A></LI></ul><A NAME="1009434">
The exponent part is an "e" or "E" followed by an integer, which can be signed (preceded by "+" or "-"). A floating-point literal must have at least one digit and either a decimal point or "e" (or "E").</A></P>
<A NAME="1009435">
Some examples of floating-point literals are 3.1415, -3.1E12, .1e12, and 2E-12</A></P>

<H3><A NAME="Head2;"></A>
<A NAME="1008351">
 Integers
</A></H3>

<A NAME="1008352">
Integers can be expressed in decimal (base 10), hexadecimal (base 16), and octal (base 8). A decimal integer literal consists of a sequence of digits without a leading 0 (zero). A leading 0 (zero) on an integer literal indicates it is in octal; a leading 0x (or 0X) indicates hexadecimal. Hexadecimal integers can include digits (0-9) and the letters a-f and A-F. Octal integers can include only the digits 0-7.</A></P>
<A NAME="1008353">
Some examples of integer literals are: 42, 0xFFF, and -345.</A></P>

<H3><A NAME="Head2;"></A>
<A NAME="1009450">
 Object Literals
</A></H3>

<A NAME="1011679">
An object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). You should not use an object literal at the beginning of a statement. This will lead to an error.</A></P>
<A NAME="1009452">
The following is an example of an object literal. The first element of the <CODE>car</CODE> object defines a property, <CODE>myCar</CODE>; the second element, the <CODE>getCar</CODE> property, invokes a function (<CODE>Cars("honda")</CODE>); the third element, the <CODE>special</CODE> property, uses an existing variable (<CODE>Sales</CODE>).</A></P>
<PRE><A NAME="1009453">var Sales = "Toyota";</A></PRE><PRE><A NAME="1009454">function CarTypes(name) {<br>&nbsp;&nbsp;&nbsp;if(name == "Honda")<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;<br>&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "Sorry, we don't sell " + name + ".";<br>}</A></PRE><PRE><A NAME="1009455">car = {myCar: "Saturn", getCar: CarTypes("Honda"), special: Sales}</A></PRE><PRE><A NAME="1009456">document.write(car.myCar); // Saturn<br>document.write(car.getCar); // Honda<br>document.write(car.special); // Toyota</A></PRE><A NAME="1009457">
Additionally, you can use an index for the object, the <CODE>index</CODE> property (for example, 7), or nest an object inside another. The following example uses these options. These features, however, may not be supported by other ECMA-compliant browsers.</A></P>
<PRE><A NAME="1009458">car = {manyCars: {a: "Saab", b: "Jeep"}, 7: "Mazda"}</A></PRE><PRE><A NAME="1009459">document.write(car.manyCars.b); // Jeep<br>document.write(car[7]); // Mazda</A></PRE>
<H3><A NAME="Head2;"></A>
<A NAME="1008368">
 String Literals
</A></H3>

<A NAME="1008369">
A string literal is zero or more characters enclosed in double (<CODE>"</CODE>) or single (<CODE>'</CODE>) quotation marks. A string must be delimited by quotation marks of the same type; that is, either both single quotation marks or both double quotation marks. The following are examples of string literals:</A></P>
<ul><LI><A NAME="1008371">
<CODE>"blah"</CODE>
</A></LI><LI><A NAME="1008372">
<CODE>'blah'</CODE>
</A></LI><LI><A NAME="1008373">
<CODE>"1234"</CODE>
</A></LI><LI><A NAME="1008374">
<CODE>"one line \n another line"</CODE>
</A></LI></ul><A NAME="1012232">
You can call any of the methods of the String object on a string literal value--JavaScript automatically converts the string literal to a temporary String object, calls the method, then discards the temporary String object. You can also use the <CODE>String.length</CODE> property with a string literal.</A></P>
<A NAME="1011730">
You should use string literals unless you specifically need to use a String object. See <A HREF="obj.htm#1008731">"String Object" on page&nbsp;118</A> for details on <CODE>String</CODE> objects.</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1011693">
 Using Special Characters in Strings
</A></H4>

<A NAME="1008375">
In addition to ordinary characters, you can also include special characters in strings, as shown in the following example.</A></P>
<PRE><A NAME="1012199">"one line \n another line"</A></PRE><A NAME="1012197">
The following table lists the special characters that you can use in JavaScript strings.</A></P>
<A NAME="1009867">
<P><B><A NAME="1008383">
Table 2.1&nbsp;JavaScript special characters </A></B>
<TABLE BORDER="2" CELLPADDING=5>
<TR><TH VALIGN=baseline ALIGN=left><B><A NAME="1008387">
<B>Character
</B></A><B><TH VALIGN=baseline ALIGN=left><B><A NAME="1008389">
<B>Meaning
</B></A><B>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1008391">\b</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1008393">
Backspace</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1008395">\f</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1008397">
Form feed</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1008399">\n</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1008401">
New line</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1008403">\r</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1008405">
Carriage return</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1008407">\t</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1008409">
Tab</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1012500">\'</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1012502">
Apostrophe or single quote</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1012496">\"</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1012498">
Double quote</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1008411">\\</A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1008413">
Backslash character (\)</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1012526">\<I>XXX</I></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1012528">
The character with the Latin-1 encoding specified by up to three octal digits <I>XXX</I> between 0 and 377. For example, \251 is the octal sequence for the copyright symbol.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1012522">\x<I>XX</I></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1012524">
The character with the Latin-1 encoding specified by the two hexadecimal digits <I>XX</I> between 00 and FF. For example, \xA9 is the hexadecimal sequence for the copyright symbol.</A></P>
<TR><TD VALIGN=baseline ALIGN=left><PRE><A NAME="1012569">\u<I>XXXX</I></A></PRE><TD VALIGN=baseline ALIGN=left><P><A NAME="1012571">
The Unicode character specified by the four hexadecimal digits <I>XXXX</I>. For example, \u00A9 is the Unicode sequence for the copyright symbol. See <A HREF="ident.htm#1009576">"Unicode Escape Sequences" on page&nbsp;44</A>.</A></P>

</TABLE>
<TABLE>
<TR><TD>
</TABLE>
</A></P>

<H4><A NAME="Head3;"></A>
<A NAME="1008415">
 Escaping Characters
</A></H4>

<A NAME="1008419">
For characters not listed in <A HREF="ident.htm#1008383">Table 2.1</A>, a preceding backslash is ignored, with the exception of a quotation mark and the backslash character itself.</A></P>
<A NAME="1008420">
You can insert a quotation mark inside a string by preceding it with a backslash. This is known as <I>escaping</I> the quotation mark. For example,</A></P>
<PRE><A NAME="1008421">var quote = "He read \"The Cremation of Sam McGee\" by R.W. Service."<br>document.write(quote)</A></PRE><A NAME="1008422">
The result of this would be</A></P>
<P><A NAME="1008423">
He read "The Cremation of Sam McGee" by R.W. Service.
</P></A>

<A NAME="1008424">
To include a literal backslash inside a string, you must escape the backslash character. For example, to assign the file path <CODE>c:\temp</CODE> to a string, use the following:</A></P>
<PRE><A NAME="1008425">var home = <CODE>"</CODE>c:\\temp<CODE>"</CODE></A></PRE>
<HR><H2><A NAME="Unicode"></A>
<A NAME="1009568">
 Unicode
</A></H2><A NAME="1012482">
Unicode is a universal character-coding standard for the interchange and display of principal written languages. It covers the languages of Americas, Europe, Middle East, Africa, India, Asia, and Pacifica, as well as historic scripts and technical symbols. Unicode allows for the exchange, processing, and display of multilingual texts, as well as the use of common technical and mathematical symbols. It hopes to resolve internationalization problems of multilingual computing, such as different national character standards. Not all modern or archaic scripts, however, are currently supported.</A></P>
<A NAME="1009570">
The Unicode character set can be used for all known encoding. Unicode is modeled after the ASCII (American Standard Code for Information Interchange) character set. It uses a numerical value and name for each character. The character encoding specifies the identity of the character and its numeric value (code position), as well as the representation of this value in bits. The 16-bit numeric value (code value) is defined by a hexadecimal number and a prefix U, for example, U+0041 represents A. The unique name for this value is LATIN CAPITAL LETTER A.</A></P>
<B><A NAME="HeadRunIn;"></A>
<A NAME="1011422">
JavaScript versions prior to 1.3. </A></B><A NAME="1011423">
Unicode is not supported in versions of JavaScript prior to 1.3.</A></P>

<H3><A NAME="Head2;"></A>
<A NAME="1009571">
 Unicode Compatibility with ASCII and ISO
</A></H3>

<A NAME="1009572">
Unicode is compatible with ASCII characters and is supported by many programs. The first 128 Unicode characters correspond to the ASCII characters and have the same byte value. The Unicode characters U+0020 through U+007E are equivalent to the ASCII characters 0x20 through 0x7E. Unlike ASCII, which supports the Latin alphabet and uses 7-bit character set, Unicode uses a 16-bit value for each character. It allows for tens of thousands of characters. Unicode version 2.0 contains 38,885 characters. It also supports an extension mechanism, Transformation Format (UTF), named UTF-16, that allows for the encoding of one million more characters by using 16-bit character pairs. UTF turns the encoding to actual bits.</A></P>
<A NAME="1009573">
Unicode is fully compatible with the International Standard ISO/IEC 10646-1; 1993, which is a subset of ISO 10646, and supports the ISO UCS-2 (Universal Character Set) that uses two-octets (two bytes or 16 bits).</A></P>
<A NAME="1009574">
JavaScript and Navigator support for Unicode means you can use non-Latin, international, and localized characters, plus special technical symbols in JavaScript programs. Unicode provides a standard way to encode multilingual text. Since Unicode is compatible with ASCII, programs can use ASCII characters. You can use non-ASCII Unicode characters in the comments and string literals of JavaScript.</A></P>

<H3><A NAME="Head2;"></A>
<A NAME="1009576">
 Unicode Escape Sequences
</A></H3>

<A NAME="1009577">
You can use the Unicode escape sequence in string literals. The escape sequence consists of six ASCII characters: \u and a four-digit hexadecimal number. For example, \u00A9 represents the copyright symbol. Every Unicode escape sequence in JavaScript is interpreted as one character.</A></P>
<A NAME="1009580">
The following code returns the copyright symbol and the string "Netscape Communications".</A></P>
<PRE><A NAME="1009581">x="\u00A9 Netscape Communications"</A></PRE><A NAME="1009584">
The following table lists frequently used special characters and their Unicode value.</A></P>
<A NAME="1009883">
<P><B><A NAME="1009587">
Table 2.2&nbsp;Unicode values for special characters</A></B>
<TABLE BORDER="2" CELLPADDING=5>
<TR><TH VALIGN=baseline ALIGN=left><B><A NAME="1009595">
<B>Category
</B></A><B><TH VALIGN=baseline ALIGN=left><B><A NAME="1009597">
<B>Unicode value
</B></A><B><TH VALIGN=baseline ALIGN=left><B><A NAME="1009599">
<B>Name
</B></A><B><TH VALIGN=baseline ALIGN=left><B><A NAME="1009601">
<B>Format name
</B></A><B>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009603">
White space values</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009605">
\u0009</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009607">
Tab</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009609">
&lt;TAB&gt;</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009611">
</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009613">
\u000B</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009615">
Vertical Tab</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009617">
&lt;VT&gt;</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009619">
</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009621">
\u000C</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009623">
Form Feed</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009625">
&lt;FF&gt;</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009627">
</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009629">
\u0020</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009631">
Space</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009633">
&lt;SP&gt;</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009635">
Line terminator values</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009637">
\u000A</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009639">
Line Feed</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009641">
&lt;LF&gt;</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009643">
</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009645">
\u000D</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009647">
Carriage Return</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009649">
&lt;CR&gt;</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009651">
Additional Unicode escape sequence values</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009653">
\u000b</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009655">
Backspace</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009657">
&lt;BS&gt;</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009659">
</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009661">
\u0009</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009663">
Horizontal Tab</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009665">
&lt;HT&gt;</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009667">
</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009669">
\u0022</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009671">
Double Quote</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009673">
"</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009675">
</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009677">
\u0027</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009679">
Single Quote</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009681">
'</A></P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009683">
</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009685">
\u005C</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009687">
Backslash</A></P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009689">
\</A></P>

</TABLE>
<TABLE>
<TR><TD>
</TABLE>
</A></P>
<A NAME="1012604">
The JavaScript use of the Unicode escape sequence is different from Java. In JavaScript, the escape sequence is never interpreted as a special character first. For example, a line terminator escape sequence inside a string does not terminate the string before it is interpreted by the function. JavaScript ignores any escape sequence if it is used in comments. In Java, if an escape sequence is used in a single comment line, it is interpreted as an Unicode character. For a string literal, the Java compiler interprets the escape sequences first. For example, if a line terminator escape character (\u000A) is used in Java, it terminates the string literal. In Java, this leads to an error, because line terminators are not allowed in string literals. You must use \n for a line feed in a string literal. In JavaScript, the escape sequence works the same way as \n.</A></P>

<H3><A NAME="Head2;"></A>
<A NAME="1009690">
 Displaying Characters with Unicode
</A></H3>

<A NAME="1009691">
You can use Unicode to display the characters in different languages or technical symbols. For characters to be displayed properly, a client such as Netscape Navigator 4.x needs to support Unicode. Moreover, an appropriate Unicode font must be available to the client, and the client platform must support Unicode. Often, Unicode fonts do not display all the Unicode characters. Some platforms, such as Windows 95, provide a partial support for Unicode.</A></P>
<A NAME="1009692">
To receive non-ASCII character input, the client needs to send the input as Unicode. Using a standard enhanced keyboard, the client cannot easily input the additional characters supported by Unicode. Often, the only way to input Unicode characters is by using Unicode escape sequences. The Unicode specification, however, does not require the use of escape sequences. Unicode delineates a method for rendering special Unicode characters using a composite character. It specifies the order of characters that can be used to create a composite character, where the base character comes first, followed by one or more non-spacing marks. Common implementations of Unicode, including the JavaScript implementation, however, do not support this option. JavaScript does not attempt the representation of the Unicode combining sequences. In other words, an input of <CODE>a</CODE> and <CODE>'</CODE> does not produce <CODE>&agrave;</CODE>. JavaScript interprets <CODE>a'</CODE> as two distinct 16-bit Unicode characters. You must use a Unicode escape sequence or a literal Unicode character for <CODE>&agrave;</CODE>.</A></P>
<A NAME="1009699">
For more information on Unicode, see the <A HREF="http://www.unicode.org" TARGET="_top">Unicode Consortium Web site</A> and The Unicode Standard, Version 2.0, published by Addison-Wesley, 1996.</A></P>

<HR>

<FONT SIZE=-1><A HREF="contents.htm">Table of Contents</A> | <A HREF="partcore.htm">Previous</A>
 | <A HREF="expr.htm">Next</A>
 | <A HREF="bklast.htm">Index</A>
</FONT>
<P ALIGN=right>
<FONT SIZE=-2><I>Last Updated:  05/27/99  21:21:20</I></FONT>
<P> <CENTER>Copyright (c) 1999
<A HREF="http://home.netscape.com/misc/contact_info.html"
TARGET=_top>Netscape Communications Corporation</A></FONT>
</CENTER>
<P>
</BODY>
</HTML>


