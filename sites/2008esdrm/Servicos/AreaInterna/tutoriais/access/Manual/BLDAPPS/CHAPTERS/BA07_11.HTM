<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html><head><title>Using Conditional Compilation</title>
<link REL="STYLESHEET" HREF="naetugp.css" TYPE="text/css">
<script Language="VBScript">
Dim look
Sub SyncURL(look)
if right(top.frames(0).frames(1).location.href, 10)="toc_tc.htm" then
top.frames(0).frames(1).TreeCtl1.SyncToURL(look)
end if
End Sub
</script>
<meta name="Microsoft Theme" content="expeditn 011, default"></head>
<!--DocHeaderStart-->
<body background="../../../../_themes/expeditn/exptextb.jpg" bgcolor="#FFFFFF" text="#000000" link="#993300" vlink="#666600" alink="#CC3300"><!--mstheme--><font face="book antiqua, times new roman, times"><a HREF="ba07_10.htm" OnClick="SyncURL(&quot;chapters/ba07_10.htm&quot;)"><img SRC="..\images\prevpage.gif" ALT="Previous Page" ALIGN="RIGHT" BORDER="0"></a>
<!--DocHeaderEnd-->
<!-- This is a PANDA Generated HTML file. The source is a WinWord Document. -->
<a NAME="3UsingConditionalCompilation"></a>
<p CLASS="heading3OrgHeading1h1">Using Conditional Compilation</p>
<p CLASS="Textttext">You use conditional compilation to specify the parts of your program you want Microsoft Access to include or ignore when compiling and running. Using conditional compilation, you can maintain a single version of your application that behaves differently under certain conditions. For example, you may use conditional compilation to:</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&amp;nbspInclude specific features of your program in different versions of your application. For example, you may want to design your application to run on different platforms.</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&amp;nbspChange the date and currency display filters for an application distributed in several different languages.</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&amp;nbspInclude or exclude code used for debugging your application.</p>
<a NAME="4StructuringCodeforConditionalCompilation"></a>
<p CLASS="heading4OrgHeading2h2">Structuring Code for Conditional Compilation</p>
<p CLASS="Textttext">Visual Basic provides special statements called <span CLASS="NewTermntrm">directives</span> for creating conditional compilation constructs. You use the <span CLASS="ElementNameeln">#Const</span> directive to declare a <span CLASS="ElementNameeln">Boolean</span> conditional compilation constant. You then evaluate this constant within the #<span CLASS="ElementNameeln">If...Then...#Else</span> directive.
<p CLASS="Textttext">To conditionally compile a portion of your code, enclose it between #<span CLASS="ElementNameeln">If...Then</span> and #<span CLASS="ElementNameeln">End If</span> statements, using the conditional compilation constant as the branching test. When you want this segment of code to be compiled and run, set the value of the constant to <span CLASS="ElementNameeln">True</span> (-1). Otherwise, set the constant to <span CLASS="ElementNameeln">False</span> (0).
<p CLASS="Textttext">For example, suppose you want to include a portion of code only in an administrator's copy of your application. Start by wrapping this segment in an <span CLASS="ElementNameeln">If...Then</span> statement preceded by a number sign (#).</p>
<p CLASS="CodeTextct">#If Admn Then<br>&nbsp;&nbsp;&nbsp;.<br>&nbsp;&nbsp;&nbsp;. ' Insert code to be compiled and run only for an administrator's<br>&nbsp;&nbsp;&nbsp;. ' version.<br>#End If</p>
<p CLASS="Textttext">If the value of the constant Admn is set to <span CLASS="ElementNameeln">True </span>at compile time, Visual Basic compiles and runs the conditional code. Otherwise, Visual Basic ignores it.</p>
<p CLASS="NoteTextnt"><span CLASS="NoteHeadingnh">Note&nbsp;&nbsp;&nbsp;</span>Unlike<span CLASS="ElementNameeln"> </span>regular Visual Basic code, you can't include other statements on the same line as a conditional compilation statement by separating those statements with colons.</p>
<a NAME="4DeclaringConditionalCompilationConstants"></a>
<p CLASS="heading4OrgHeading2h2">Declaring Conditional Compilation Constants</p>
<p CLASS="Textttext">You can declare conditional compilation constants by setting the <span CLASS="ElementNameeln">Conditional Compilation Arguments</span> option on the <span CLASS="ElementNameeln">Advanced</span> tab of the <span CLASS="ElementNameeln">Options</span> dialog box (<span CLASS="ElementNameeln">Tools</span> menu). The list should contain simple assignment statements separated by colons. For example:</p>
<p CLASS="CodeTextct">Admn = True : Ansi = 0</p>
<p CLASS="Textttext">Alternatively, you can explicitly declare conditional compilation constants in the Declarations section of the module containing the #<span CLASS="ElementNameeln">If...Then</span> and #<span CLASS="ElementNameeln">Else</span> statements, as follows:</p>
<p CLASS="CodeTextct">#Const Admn = True</p>
<p CLASS="Textttext">Conditional compilation constants have a special scope and cannot be accessed from standard code. While constants declared with the <span CLASS="ElementNameeln">#Const</span> statement are private to the module in which they are declared, constants declared in the <span CLASS="ElementNameeln">Options</span> dialog box are public to all modules in your application.
<p CLASS="Textttext">Only conditional compilation constants and literals can be used in expressions that you specify by way of the user interface or with the <span CLASS="ElementNameeln">#Const</span> statement. Any undeclared identifier used in a conditional compilation expression generates a compile error.</p>
<a NAME="4UsingConditionalCompilationforDebugging"></a>
<p CLASS="heading4OrgHeading2h2">Using Conditional Compilation for Debugging</p>
<p CLASS="Textttext">You can use conditional compilation to remove debugging statements from the application you distribute to users. To do this, use conditional compilation to include these statements during development, and then ignore these statements in the version of your application that you distribute to users.
<p CLASS="Textttext">The following example procedure uses these statements to display an assertion message when a function is passed a value it isn't designed to handle. You may use a function like this one while writing and debugging your code. Once you've finished debugging your code and you're ready to distribute your application to users, you no longer need the function.</p>
<p CLASS="CodeTextct">Sub Assertion(blnExpr As Boolean, strMsg As String)<br>&nbsp;&nbsp;&amp;nbspIf Not blnExpr Then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspMsgBox strMsg, , &quot;Assertion&quot;<br>&nbsp;&nbsp;&amp;nbspEnd If<br>End Sub<br>Sub AProcedure(intX As Integer)<br>&nbsp;&nbsp;&amp;nbsp#If fDebug Then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspAssertion intX &lt; 10000 and intX &gt; 0, &quot;Argument out of range&quot;<br>&nbsp;&nbsp;&amp;nbsp#End If<br>&nbsp;&nbsp;&nbsp;' The code can now assume the correct value.<br>End Sub</p>
<p CLASS="Textttext">Because the call to the Assertion procedure is conditionally compiled, it is only run if <span CLASS="CodeTextEmbeddedcte">fDebug</span> is set to <span CLASS="ElementNameeln">True</span>. When you compile your application to distribute it to users, set <span CLASS="CodeTextEmbeddedcte">fDebug</span> to <span CLASS="ElementNameeln">False</span>. As a result, the application will compile and run as efficiently as possible.</p>
<p><!--DocFooterStart-->
<p><span CLASS="copyright"><a HREF="cpyright.htm">© 1996 Microsoft Corporation. All rights reserved.</a></span>
<p><!--DocFooterEnd-->
<a HREF="ba08_1.htm" OnClick="SyncURL(&quot;chapters/ba08_1.htm&quot;)"><img SRC="..\images\nextpage.gif" ALT="Next Page" ALIGN="RIGHT" BORDER="0"></a><!--mstheme--></font></body></html>
