<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html><head><title>Turning Off Error Handling</title>
<link REL="STYLESHEET" HREF="naetugp.css" TYPE="text/css">
<script Language="VBScript">
Dim look
Sub SyncURL(look)
if right(top.frames(0).frames(1).location.href, 10)="toc_tc.htm" then
top.frames(0).frames(1).TreeCtl1.SyncToURL(look)
end if
End Sub
</script>
<meta name="Microsoft Theme" content="expeditn 011, default"></head>
<!--DocHeaderStart-->
<body background="../../../../_themes/expeditn/exptextb.jpg" bgcolor="#FFFFFF" text="#000000" link="#993300" vlink="#666600" alink="#CC3300"><!--mstheme--><font face="book antiqua, times new roman, times"><a HREF="ba08_7.htm" OnClick="SyncURL(&quot;chapters/ba08_7.htm&quot;)"><img SRC="..\images\prevpage.gif" ALT="Previous Page" ALIGN="RIGHT" BORDER="0"></a>
<!--DocHeaderEnd-->
<!-- This is a PANDA Generated HTML file. The source is a WinWord Document. -->
<a NAME="3TurningOffErrorHandling"></a>
<p CLASS="heading3OrgHeading1h1">Turning Off Error Handling</p>
<p CLASS="Textttext">Error traps that are enabled in a procedure are automatically disabled once the procedure is exited. However, you may want to turn off an error trap in a procedure while the code in that procedure is still running. To turn off an enabled error trap, use the <span CLASS="ElementNameeln">On Error GoTo 0</span> statement. After Visual Basic runs this statement, errors are detected but not trapped within the procedure. You can use the <span CLASS="ElementNameeln">On Error GoTo 0</span> statement to turn off error handling anywhere in a procedure , even within error-handling code.
<p CLASS="Textttext">For example, the following <span CLASS="ElementNameeln">Sub</span> procedure accepts an SQL string value and performs an action query based on that text. The<span CLASS="ElementNameeln"> On Error Resume Next</span> statement handles any errors generated by the first <span CLASS="ElementNameeln">Delete </span>method of the <span CLASS="ElementNameeln">QueryDefs </span>collection if, for example, TempQuery doesn't exist. The <span CLASS="ElementNameeln">On Error GoTo 0 </span>statement turns error handling off so that errors generated by any subsequent statements are revealed to the user.</p>
<p CLASS="CodeTextct">Sub PerformSQLQuery(strSQLText)<br>&nbsp;&nbsp;&amp;nbspDim dbs As Database, qdfSQLQuery As QueryDef<br>&nbsp;&nbsp;&amp;nbspOn Error Resume Next<br>&nbsp;&nbsp;&amp;nbspSet dbs = DBEngine(0)(0)<br>&nbsp;&nbsp;&amp;nbspdbs.QueryDefs.Delete &quot;TempQuery&quot;<br>&nbsp;&nbsp;&amp;nbspdbs.QueryDefs.Refresh<br>&nbsp;&nbsp;&amp;nbspOn Error GoTo 0<br>&nbsp;&nbsp;&amp;nbspSet qdfSQLQuery = dbs.CreateQueryDef(&quot;TempQuery&quot;, strSQLText)<br>&nbsp;&nbsp;&amp;nbspqdfSQLQuery.Execute<br>&nbsp;&nbsp;&amp;nbspqdfSQLQuery.Close<br>&nbsp;&nbsp;&amp;nbspdbs.QueryDefs.Delete &quot;TempQuery&quot;<br>&nbsp;&nbsp;&amp;nbspdbs.QueryDefs.Refresh<br>End Sub</p>
<p CLASS="NoteTextnt"><span CLASS="NoteHeadingnh">Note&nbsp;&nbsp;&nbsp;</span>An <span CLASS="ElementNameeln">On Error GoTo 0</span> statement turns off the most recently enabled error handler, not all error handlers. If you have an error handler for an entire procedure and also use inline error handling for a part of that same procedure, the <span CLASS="ElementNameeln">On Error GoTo 0</span> statement disables the <span CLASS="ElementNameeln">On Error Resume Next</span> statement and the procedure's error handler is called once again.</p>
<p><!--DocFooterStart-->
<p><span CLASS="copyright"><a HREF="cpyright.htm">© 1996 Microsoft Corporation. All rights reserved.</a></span>
<p><!--DocFooterEnd-->
<a HREF="ba09_1.htm" OnClick="SyncURL(&quot;chapters/ba09_1.htm&quot;)"><img SRC="..\images\nextpage.gif" ALT="Next Page" ALIGN="RIGHT" BORDER="0"></a><!--mstheme--></font></body></html>
