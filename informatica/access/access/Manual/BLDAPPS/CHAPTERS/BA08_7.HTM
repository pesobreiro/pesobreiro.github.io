<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html><head><title>Inline Error Handling</title>
<link REL="STYLESHEET" HREF="naetugp.css" TYPE="text/css">
<script Language="VBScript">
Dim look
Sub SyncURL(look)
if right(top.frames(0).frames(1).location.href, 10)="toc_tc.htm" then
top.frames(0).frames(1).TreeCtl1.SyncToURL(look)
end if
End Sub
</script>
<meta name="Microsoft Theme" content="expeditn 011, default"></head>
<!--DocHeaderStart-->
<body background="../../../../_themes/expeditn/exptextb.jpg" bgcolor="#FFFFFF" text="#000000" link="#993300" vlink="#666600" alink="#CC3300"><!--mstheme--><font face="book antiqua, times new roman, times"><a HREF="ba08_6.htm" OnClick="SyncURL(&quot;chapters/ba08_6.htm&quot;)"><img SRC="..\images\prevpage.gif" ALT="Previous Page" ALIGN="RIGHT" BORDER="0"></a>
<!--DocHeaderEnd-->
<!-- This is a PANDA Generated HTML file. The source is a WinWord Document. -->
<a NAME="3InlineErrorHandling"></a>
<p CLASS="heading3OrgHeading1h1">Inline Error Handling</p>
<p CLASS="Textttext">You may be used to programming in a language that doesn't interrupt the execution of your code with exceptions when errors occur, but instead records errors for you to check and handle later. For example, the C programming language works this way. You may sometimes find it convenient to follow this practice in your Visual Basic code. When you check for errors immediately after each line of code that may cause an error, you are performing <span CLASS="NewTermntrm">inline error handling</span>.
<p CLASS="Textttext">The simplest way to return an error number to a calling procedure is to create functions and statements that return an error number instead of a value if an error occurs. Using this method, you implement inline error handling by testing for an error immediately after each statement or function call in your code. In each case, you can design an error handler that tests for just the kind of error that may arise and provides an appropriate resolution.
<p CLASS="Textttext">This approach doesn't require that an actual Visual Basic run-time error occur. You can also trap user-defined errors, or you can use this method when you're working with DLLs or other libraries that don't raise Visual Basic errors.
<p CLASS="Textttext">The following example uses the DoubleNum function from a section earlier in this chapter to demonstrate how to return an error number to a calling procedure if an argument passed to the DoubleNum function isn't numeric.</p>
<p CLASS="CodeTextct">Dim TestValue As Variant<br>TestValue = DoubleNum(&quot;3210r&quot;)<br>If IsError(TestValue) Then<br>&nbsp;&nbsp;&nbsp;.<br>&nbsp;&nbsp;&nbsp;. ' Handle the error.<br>&nbsp;&nbsp;&nbsp;.<br>Else<br>&nbsp;&nbsp;&nbsp;.<br>&nbsp;&nbsp;&nbsp;. ' Continue program.<br>&nbsp;&nbsp;&nbsp;.<br>End If</p>
<p CLASS="Textttext">You can also use the <span CLASS="ElementNameeln">Raise</span> method of the <span CLASS="ElementNameeln">Err</span> object to pass an error value to the calling procedure. Place the <span CLASS="ElementNameeln">On Error Resume Next</span> statement at the beginning of your procedure, or before statements or function calls in your code that may cause an error. After an error occurs, you can use error-handling code to examine the value returned by the <span CLASS="ElementNameeln">Err</span> object's properties. If the <span CLASS="ElementNameeln">Number</span> property of the <span CLASS="ElementNameeln">Err</span> object doesn't return zero, an error has occurred and the error-handling code can take the appropriate action.
<p CLASS="Textttext">The example in the previous section can be modified to use the <span CLASS="ElementNameeln">Raise</span> method as follows:</p>
<p CLASS="CodeTextct">Function DoubleNum(Num)<br>&nbsp;&nbsp;&amp;nbspIf IsNumeric(Num) Then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspDoubleNum = Num * 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' Return result.<br>&nbsp;&nbsp;&amp;nbspElse<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspErr.Raise Number:=30000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' Raise a user-defined error.<br>&nbsp;&nbsp;&amp;nbspEnd If<br>End Function<br>&nbsp;&nbsp;&amp;nbspDim TestValue As Variant<br>&nbsp;&nbsp;&amp;nbspOn Error Resume Next<br>&nbsp;&nbsp;&amp;nbspTestValue = DoubleNum(&quot;3210r&quot;)<br>&nbsp;&nbsp;&amp;nbspIf Err.Number = 30000 Then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;. ' Handle the error.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<br>&nbsp;&nbsp;&amp;nbspElse<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;. ' Continue program.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<br>&nbsp;&nbsp;&amp;nbspEnd If<br>&nbsp;&nbsp;&amp;nbspOn Error GoTo 0</p>
<p CLASS="Textttext">There are times when you may need to defer error handling in a loop. You can do this by manually resetting the <span CLASS="ElementNameeln">Number</span> property of the <span CLASS="ElementNameeln">Err</span> object to zero so that you can continue to check for errors in the loop. For example, the following <span CLASS="ElementNameeln">Sub</span> procedure iterates through all of the fields in a recordset and tries to change their values. If an error occurs, the field name is printed in the Debug window.</p>
<p CLASS="CodeTextct">Sub SetAllFields(rst As Recordset)<br>&nbsp;&nbsp;&amp;nbspDim fld As Field<br>&nbsp;&nbsp;&amp;nbsprst.MoveFirst<br>&nbsp;&nbsp;&amp;nbspOn Error Resume Next<br>&nbsp;&nbsp;&amp;nbspDo Until rst.EOF<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspFor Each fld In rst.Fields<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsprst.Edit<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspfld = InputBox(&quot;New value for &quot; &amp; fld.Name &amp; &quot;?&quot;, , &quot;New Value&quot;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspIf Err &lt;&gt; 0 Then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspErr = 0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspDebug.Print fld.Name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspEnd If<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsprst.Update<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspNext fld<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsprst.MoveNext<br>&nbsp;&nbsp;&amp;nbspLoop<br>&nbsp;&nbsp;&amp;nbsprst.Close<br>End Sub</p>
<p CLASS="Textttext">If you don't set the <span CLASS="ElementNameeln">Number</span> property of the<span CLASS="ElementNameeln"> Err</span> object equal to zero inside the loop, then the first error that occurs will cause every subsequent field's name to be printed in the Debug window.
<p CLASS="Textttext">Keep these points in mind when using inline error handling:</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&amp;nbspThe code that detects and deals with an error differs from the error-handling code discussed earlier in this chapter in that it doesn't contain any <span CLASS="ElementNameeln">Resume</span> statements.</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&amp;nbspThe error code number returned by the <span CLASS="ElementNameeln">Number</span> property of the <span CLASS="ElementNameeln">Err</span> object is the number of the most recent error. Additional errors that occur earlier in the preceding code aren't accounted for.</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&amp;nbspIf a <span CLASS="ElementNameeln">Resume</span>, <span CLASS="ElementNameeln">Resume Next</span>, or <span CLASS="ElementNameeln">On Error </span>statement is run, or if a procedure call is made, Visual Basic resets the properties of the <span CLASS="ElementNameeln">Err</span> object to zero or zero-length strings (&quot;&quot;). If you're going to use the values returned by the <span CLASS="ElementNameeln">Err </span>object properties, store them in variables before running any of these statements.</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&amp;nbspIf errors occur and error handling is deferred, logic errors in the intervening code can produce unexpected results. Try to limit the amount of time error handling is turned off by using an <span CLASS="ElementNameeln">On Error GoTo</span> statement as soon as you can to prevent failure to trap unexpected errors.</p>
<p><!--DocFooterStart-->
<p><span CLASS="copyright"><a HREF="cpyright.htm">© 1996 Microsoft Corporation. All rights reserved.</a></span>
<p><!--DocFooterEnd-->
<a HREF="ba08_8.htm" OnClick="SyncURL(&quot;chapters/ba08_8.htm&quot;)"><img SRC="..\images\nextpage.gif" ALT="Next Page" ALIGN="RIGHT" BORDER="0"></a><!--mstheme--></font></body></html>
