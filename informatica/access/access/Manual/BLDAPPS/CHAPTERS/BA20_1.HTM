<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html><head><title>CHAPTER 20</title>
<link REL="STYLESHEET" HREF="naetugp.css" TYPE="text/css">
<script Language="VBScript">
Dim look
Sub SyncURL(look)
if right(top.frames(0).frames(1).location.href, 10)="toc_tc.htm" then
top.frames(0).frames(1).TreeCtl1.SyncToURL(look)
end if
End Sub
</script>
<meta name="Microsoft Theme" content="expeditn 011, default"></head>
<!--DocHeaderStart-->
<body background="../../../../_themes/expeditn/exptextb.jpg" bgcolor="#FFFFFF" text="#000000" link="#993300" vlink="#666600" alink="#CC3300"><!--mstheme--><font face="book antiqua, times new roman, times"><a HREF="ba19_9.htm" OnClick="SyncURL(&quot;chapters/ba19_9.htm&quot;)"><img SRC="..\images\prevpage.gif" ALT="Previous Page" ALIGN="RIGHT" BORDER="0"></a>
<!--DocHeaderEnd-->
<!-- This is a PANDA Generated HTML file. The source is a WinWord Document. -->
<p CLASS="heading2ChapterNumberAppendixLetterchn">CHAPTER&nbsp; 20</p>
<p CLASS="ChapterAppendixTitlecht">Using Replication in Your Application</p>
<p CLASS="ChapterSummaryTextchsum">If you design your applications for multiple users, database replication can improve the way your users share data. By using database replication, you can make copies of a database, called replicas, so that two or more users can work on their own replica of the database at the same time. Although replicas may be located on different computers and in different offices, they stay synchronized with one another. This chapter discusses how to create and use replicas of your application database.
<a NAME="3WhyUseDatabaseReplication"></a>
<p CLASS="heading3OrgHeading1h1">Why Use Database Replication?</p>
<p CLASS="Textttext"><span CLASS="NewTermntrm">Database replication</span> is the process of copying a database so that two or more copies can exchange updates of data or replicated objects. This exchange is called <span CLASS="NewTermntrm">synchronization</span>. Each copy of the database is called a <span CLASS="NewTermntrm">replica</span>, and each contains a common set of tables, queries, forms, reports, macros, and modules. Each replica can also contain <span CLASS="NewTermntrm">local objects</span> that exist only in that specific replica.
<p CLASS="Textttext">Each replica is part of a <span CLASS="NewTermntrm">replica set</span>, which contains the Design Master and the other replicas for a database. The <span CLASS="NewTermntrm">Design Master</span> is the only replica where you can make changes to the database's design and objects. Replicas that belong to the same replica set can synchronize with one another.
<p CLASS="Textttext">With database replication, you can:</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&nbsp;<span CLASS="ElementNameeln">Share data among offices</span>&nbsp;&nbsp;&amp;nbspYou can use database replication to create copies of a corporate database to send to each satellite office. Each location enters data into its replica, and all remote replicas are synchronized with the replica at corporate headquarters. An individual replica can maintain local tables that contain information not included in the other replicas in the set.</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&nbsp;<span CLASS="ElementNameeln">Share data among dispersed users</span>&nbsp;&nbsp;&amp;nbspNew information that is entered into the database while sales representatives are out of the office can be synchronized anytime the sales representatives establish an electronic link with the corporate network. As part of their workday routine, sales representatives can dial into the network, synchronize the replica, and work on the most current version of the database. Because only the incremental changes are transmitted during synchronization, the time and expense of keeping up-to-date information are minimized. Using <span CLASS="NewTermntrm">partial replicas</span>, it's also possible to synchronize only certain parts of the data.</p>
<p CLASS="ListText1lt1"><span CLASS="CrossRefHeadingcrh">See Also&nbsp;&nbsp;&nbsp;</span><span CLASS="Xref">For more information on partial replicas, see <a HREF="../chapters/ba20_6.htm" OnClick="SyncURL(&quot;chapters/ba20_6.htm&quot;)">&quot;Replicating Part of a Database&quot;</a> later in this chapter.</span></p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&nbsp;<span CLASS="ElementNameeln">Make server data accessible</span>&nbsp;&nbsp;&amp;nbspIf your application doesn't need to have immediate updates to data, you can use database replication to reduce the network load on your primary server. Introducing a second server with its own copy of the database improves response time. You determine the schedule for synchronizing the replicas and you can adjust that schedule to meet the changing needs of your users. Replication requires less centralized administration of the database while offering greater access to centralized data.</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&nbsp;<span CLASS="ElementNameeln">Distribute application updates</span>&nbsp;&nbsp;&amp;nbspWhen you replicate your application, you automatically replicate not only the data in your tables, but also your application's objects. If you make changes to the design of the database, the changes are transmitted during the next synchronization exchange; you don't have to distribute complete new versions of the software.</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&nbsp;<span CLASS="ElementNameeln">Back up data</span>&nbsp;&nbsp;&amp;nbspAt first glance, database replication may appear to be very similar to copying a database. However, while replication initially makes a complete copy of the database, thereafter it simply synchronizes that replica's objects with the original objects at regular intervals. This copy can be used to back up data if the original database is destroyed. Furthermore, users at any replica can continue to access the database during the entire backup process.</p>
<p CLASS="Textttext">Although database replication can solve many of the problems inherent in distributed database processing, it is important to recognize the situations in which replication is less than ideal. You may not want to use replication if:</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&nbsp;<span CLASS="ElementNameeln">There are large numbers of record updates at multiple replicas</span>&nbsp;&nbsp;&amp;nbspApplications that require frequent updating of existing records in different replicas are likely to have more record conflicts than applications that simply insert new records into a database. Record conflicts occur when two changes are made to the same record by users at different locations. Applications with many record conflicts require more time for someone to manually resolve those conflicts.</p>
<p CLASS="ListBulletedItem1lb1"><img SRC="../images/bullet.jpg" WIDTH="5" HEIGHT="7">&nbsp;<span CLASS="ElementNameeln">Data consistency is critical at all times</span>&nbsp;&nbsp;&amp;nbspApplications that rely on information being correct at all times, such as funds transfer, airline reservations, and the tracking of package shipments, usually use a transaction method. While transactions can be processed within a replica, there is no support for processing transactions across replicas. The information exchanged between replicas during synchronization is the result of the transaction, not the transaction itself.</p>
<p CLASS="Textttext">The new approach and flexibility that database replication offers can be illustrated by the development of a simple application. Imagine that a client has asked you to develop a contact management application for the company's field sales staff to use to monitor sales and orders. Each sales representative has a laptop computer that can be connected to the company's network.
<p CLASS="Textttext">One approach to building this application is to separate the tables from the other objects in the database. The data resides in tables in a back-end database on a network server while the queries, forms, reports, macros, and modules reside in a front-end database on each sales representative's computer. When sales representatives want to retrieve or update data, they open and use the front-end database. Because the objects in the front-end database are based on linked tables, changes that sales representatives make to the data using these objects change the data in the back-end database.</p>
<p CLASS="CrossRefTextcrt"><span CLASS="CrossRefHeadingcrh">See Also&nbsp;&nbsp;&nbsp;</span>For more information on this approach, see <a HREF="../chapters/ba15_3.htm" OnClick="SyncURL(&quot;chapters/ba15_3.htm&quot;)">&quot;Separating Your Application's Tables from Its Other Objects&quot;</a> in Chapter 15, &quot;Delivering Your Application.&quot;</p>
<p CLASS="Textttext">A better way to build this application is to use database replication to create a single database that contains both the data and objects, and then make replicas of the database for each sales representative.
<p CLASS="Textttext">You begin developing the application by creating a Microsoft Access database as you would for any application. Then you convert that database to a Design Master and make replicas on each user's computer. Sales representatives update data in the replicas on their computers during the course of a work session, while you synchronize their replicas with the Design Master replica on the server as needed. You can also create a set of custom forms or reports that are used at only one replica location. The following sections discuss the tools you can use to implement each of these features.</p>
<p><!--DocFooterStart-->
<p><span CLASS="copyright"><a HREF="cpyright.htm">© 1996 Microsoft Corporation. All rights reserved.</a></span>
<p><!--DocFooterEnd-->
<a HREF="ba20_2.htm" OnClick="SyncURL(&quot;chapters/ba20_2.htm&quot;)"><img SRC="..\images\nextpage.gif" ALT="Next Page" ALIGN="RIGHT" BORDER="0"></a><!--mstheme--></font></body></html>
